# This module has been generated automatically from space group information
# obtained from the Computational Crystallography Toolbox
#

from Scientific.Geometry import Vector, Tensor
from Scientific.Geometry.Transformation import Rotation, Translation
from Scientific import N

class SpaceGroup(object):

    def __init__(self, labels, transformations):
        self.labels = labels
        self.transformations = transformations

_space_group_table = {}

def getSpaceGroupTransformations(space_group_label):
    try:
        return _space_group_table[space_group_label].transformations
    except KeyError:
        pass
    space_group_label = ''.join(space_group_label.split())
    return _space_group_table[space_group_label].transformations

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C1^1', '1', 'P 1', 'P1'], transformations)
_space_group_table['C1^1'] = sg
_space_group_table['1'] = sg
_space_group_table['P 1'] = sg
_space_group_table['P1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Ci^1', '2', '-P 1', 'P-1'], transformations)
_space_group_table['Ci^1'] = sg
_space_group_table['2'] = sg
_space_group_table['-P 1'] = sg
_space_group_table['P-1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2^1', 'P 2y', 'P121', 'P2:b', '3:b'], transformations)
_space_group_table['C2^1'] = sg
_space_group_table['P 2y'] = sg
_space_group_table['P121'] = sg
_space_group_table['P2:b'] = sg
_space_group_table['3:b'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2^1', 'P 2', 'P112', 'P2:c', '3:c'], transformations)
_space_group_table['C2^1'] = sg
_space_group_table['P 2'] = sg
_space_group_table['P112'] = sg
_space_group_table['P2:c'] = sg
_space_group_table['3:c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2^1', 'P 2x', 'P211', 'P2:a', '3:a'], transformations)
_space_group_table['C2^1'] = sg
_space_group_table['P 2x'] = sg
_space_group_table['P211'] = sg
_space_group_table['P2:a'] = sg
_space_group_table['3:a'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2^2', 'P 2yb', 'P1211', 'P21:b', '4:b'], transformations)
_space_group_table['C2^2'] = sg
_space_group_table['P 2yb'] = sg
_space_group_table['P1211'] = sg
_space_group_table['P21:b'] = sg
_space_group_table['4:b'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2^2', 'P 2c', 'P1121', 'P21:c', '4:c'], transformations)
_space_group_table['C2^2'] = sg
_space_group_table['P 2c'] = sg
_space_group_table['P1121'] = sg
_space_group_table['P21:c'] = sg
_space_group_table['4:c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2^2', 'P 2xa', 'P2111', 'P21:a', '4:a'], transformations)
_space_group_table['C2^2'] = sg
_space_group_table['P 2xa'] = sg
_space_group_table['P2111'] = sg
_space_group_table['P21:a'] = sg
_space_group_table['4:a'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2^3', 'C 2y', 'C121', 'C2:b1', '5:b1'], transformations)
_space_group_table['C2^3'] = sg
_space_group_table['C 2y'] = sg
_space_group_table['C121'] = sg
_space_group_table['C2:b1'] = sg
_space_group_table['5:b1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2^3', 'A 2y', 'A121', 'C2:b2', '5:b2'], transformations)
_space_group_table['C2^3'] = sg
_space_group_table['A 2y'] = sg
_space_group_table['A121'] = sg
_space_group_table['C2:b2'] = sg
_space_group_table['5:b2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2^3', 'I 2y', 'I121', 'C2:b3', '5:b3'], transformations)
_space_group_table['C2^3'] = sg
_space_group_table['I 2y'] = sg
_space_group_table['I121'] = sg
_space_group_table['C2:b3'] = sg
_space_group_table['5:b3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2^3', 'A 2', 'A112', 'C2:c1', '5:c1'], transformations)
_space_group_table['C2^3'] = sg
_space_group_table['A 2'] = sg
_space_group_table['A112'] = sg
_space_group_table['C2:c1'] = sg
_space_group_table['5:c1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2^3', 'B 2', 'B2', 'B112', 'C2:c2', '5:c2'], transformations)
_space_group_table['C2^3'] = sg
_space_group_table['B 2'] = sg
_space_group_table['B2'] = sg
_space_group_table['B112'] = sg
_space_group_table['C2:c2'] = sg
_space_group_table['5:c2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2^3', 'I 2', 'I112', 'C2:c3', '5:c3'], transformations)
_space_group_table['C2^3'] = sg
_space_group_table['I 2'] = sg
_space_group_table['I112'] = sg
_space_group_table['C2:c3'] = sg
_space_group_table['5:c3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2^3', 'B 2x', 'B211', 'C2:a1', '5:a1'], transformations)
_space_group_table['C2^3'] = sg
_space_group_table['B 2x'] = sg
_space_group_table['B211'] = sg
_space_group_table['C2:a1'] = sg
_space_group_table['5:a1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2^3', 'C 2x', 'C211', 'C2:a2', '5:a2'], transformations)
_space_group_table['C2^3'] = sg
_space_group_table['C 2x'] = sg
_space_group_table['C211'] = sg
_space_group_table['C2:a2'] = sg
_space_group_table['5:a2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2^3', 'I 2x', 'I211', 'C2:a3', '5:a3'], transformations)
_space_group_table['C2^3'] = sg
_space_group_table['I 2x'] = sg
_space_group_table['I211'] = sg
_space_group_table['C2:a3'] = sg
_space_group_table['5:a3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^1', 'P -2y', 'P1m1', 'Pm:b', '6:b'], transformations)
_space_group_table['Cs^1'] = sg
_space_group_table['P -2y'] = sg
_space_group_table['P1m1'] = sg
_space_group_table['Pm:b'] = sg
_space_group_table['6:b'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^1', 'P -2', 'P11m', 'Pm:c', '6:c'], transformations)
_space_group_table['Cs^1'] = sg
_space_group_table['P -2'] = sg
_space_group_table['P11m'] = sg
_space_group_table['Pm:c'] = sg
_space_group_table['6:c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^1', 'P -2x', 'Pm11', 'Pm:a', '6:a'], transformations)
_space_group_table['Cs^1'] = sg
_space_group_table['P -2x'] = sg
_space_group_table['Pm11'] = sg
_space_group_table['Pm:a'] = sg
_space_group_table['6:a'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^2', 'P -2yc', 'P1c1', 'Pc:b1', '7:b1'], transformations)
_space_group_table['Cs^2'] = sg
_space_group_table['P -2yc'] = sg
_space_group_table['P1c1'] = sg
_space_group_table['Pc:b1'] = sg
_space_group_table['7:b1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^2', 'P -2yac', 'P1n1', 'Pc:b2', '7:b2'], transformations)
_space_group_table['Cs^2'] = sg
_space_group_table['P -2yac'] = sg
_space_group_table['P1n1'] = sg
_space_group_table['Pc:b2'] = sg
_space_group_table['7:b2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^2', 'P -2ya', 'P1a1', 'Pc:b3', '7:b3'], transformations)
_space_group_table['Cs^2'] = sg
_space_group_table['P -2ya'] = sg
_space_group_table['P1a1'] = sg
_space_group_table['Pc:b3'] = sg
_space_group_table['7:b3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^2', 'P -2a', 'P11a', 'Pc:c1', '7:c1'], transformations)
_space_group_table['Cs^2'] = sg
_space_group_table['P -2a'] = sg
_space_group_table['P11a'] = sg
_space_group_table['Pc:c1'] = sg
_space_group_table['7:c1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^2', 'P -2ab', 'P11n', 'Pc:c2', '7:c2'], transformations)
_space_group_table['Cs^2'] = sg
_space_group_table['P -2ab'] = sg
_space_group_table['P11n'] = sg
_space_group_table['Pc:c2'] = sg
_space_group_table['7:c2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^2', 'P -2b', 'Pb', 'P11b', 'Pc:c3', '7:c3'], transformations)
_space_group_table['Cs^2'] = sg
_space_group_table['P -2b'] = sg
_space_group_table['Pb'] = sg
_space_group_table['P11b'] = sg
_space_group_table['Pc:c3'] = sg
_space_group_table['7:c3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^2', 'P -2xb', 'Pb11', 'Pc:a1', '7:a1'], transformations)
_space_group_table['Cs^2'] = sg
_space_group_table['P -2xb'] = sg
_space_group_table['Pb11'] = sg
_space_group_table['Pc:a1'] = sg
_space_group_table['7:a1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^2', 'P -2xbc', 'Pn11', 'Pc:a2', '7:a2'], transformations)
_space_group_table['Cs^2'] = sg
_space_group_table['P -2xbc'] = sg
_space_group_table['Pn11'] = sg
_space_group_table['Pc:a2'] = sg
_space_group_table['7:a2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^2', 'P -2xc', 'Pc11', 'Pc:a3', '7:a3'], transformations)
_space_group_table['Cs^2'] = sg
_space_group_table['P -2xc'] = sg
_space_group_table['Pc11'] = sg
_space_group_table['Pc:a3'] = sg
_space_group_table['7:a3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^3', 'C -2y', 'C1m1', 'Cm:b1', '8:b1'], transformations)
_space_group_table['Cs^3'] = sg
_space_group_table['C -2y'] = sg
_space_group_table['C1m1'] = sg
_space_group_table['Cm:b1'] = sg
_space_group_table['8:b1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^3', 'A -2y', 'A1m1', 'Cm:b2', '8:b2'], transformations)
_space_group_table['Cs^3'] = sg
_space_group_table['A -2y'] = sg
_space_group_table['A1m1'] = sg
_space_group_table['Cm:b2'] = sg
_space_group_table['8:b2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^3', 'I -2y', 'I1m1', 'Cm:b3', '8:b3'], transformations)
_space_group_table['Cs^3'] = sg
_space_group_table['I -2y'] = sg
_space_group_table['I1m1'] = sg
_space_group_table['Cm:b3'] = sg
_space_group_table['8:b3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^3', 'A -2', 'A11m', 'Cm:c1', '8:c1'], transformations)
_space_group_table['Cs^3'] = sg
_space_group_table['A -2'] = sg
_space_group_table['A11m'] = sg
_space_group_table['Cm:c1'] = sg
_space_group_table['8:c1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^3', 'B -2', 'Bm', 'B11m', 'Cm:c2', '8:c2'], transformations)
_space_group_table['Cs^3'] = sg
_space_group_table['B -2'] = sg
_space_group_table['Bm'] = sg
_space_group_table['B11m'] = sg
_space_group_table['Cm:c2'] = sg
_space_group_table['8:c2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^3', 'I -2', 'I11m', 'Cm:c3', '8:c3'], transformations)
_space_group_table['Cs^3'] = sg
_space_group_table['I -2'] = sg
_space_group_table['I11m'] = sg
_space_group_table['Cm:c3'] = sg
_space_group_table['8:c3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^3', 'B -2x', 'Bm11', 'Cm:a1', '8:a1'], transformations)
_space_group_table['Cs^3'] = sg
_space_group_table['B -2x'] = sg
_space_group_table['Bm11'] = sg
_space_group_table['Cm:a1'] = sg
_space_group_table['8:a1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^3', 'C -2x', 'Cm11', 'Cm:a2', '8:a2'], transformations)
_space_group_table['Cs^3'] = sg
_space_group_table['C -2x'] = sg
_space_group_table['Cm11'] = sg
_space_group_table['Cm:a2'] = sg
_space_group_table['8:a2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^3', 'I -2x', 'Im11', 'Cm:a3', '8:a3'], transformations)
_space_group_table['Cs^3'] = sg
_space_group_table['I -2x'] = sg
_space_group_table['Im11'] = sg
_space_group_table['Cm:a3'] = sg
_space_group_table['8:a3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^4', 'C -2yc', 'C1c1', 'Cc:b1', '9:b1'], transformations)
_space_group_table['Cs^4'] = sg
_space_group_table['C -2yc'] = sg
_space_group_table['C1c1'] = sg
_space_group_table['Cc:b1'] = sg
_space_group_table['9:b1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^4', 'A -2yac', 'A1n1', 'Cc:b2', '9:b2'], transformations)
_space_group_table['Cs^4'] = sg
_space_group_table['A -2yac'] = sg
_space_group_table['A1n1'] = sg
_space_group_table['Cc:b2'] = sg
_space_group_table['9:b2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^4', 'I -2ya', 'I1a1', 'Cc:b3', '9:b3'], transformations)
_space_group_table['Cs^4'] = sg
_space_group_table['I -2ya'] = sg
_space_group_table['I1a1'] = sg
_space_group_table['Cc:b3'] = sg
_space_group_table['9:b3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^4', 'A -2ya', 'A1a1', 'Cc:-b1', '9:-b1'], transformations)
_space_group_table['Cs^4'] = sg
_space_group_table['A -2ya'] = sg
_space_group_table['A1a1'] = sg
_space_group_table['Cc:-b1'] = sg
_space_group_table['9:-b1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^4', 'C -2ybc', 'C1n1', 'Cc:-b2', '9:-b2'], transformations)
_space_group_table['Cs^4'] = sg
_space_group_table['C -2ybc'] = sg
_space_group_table['C1n1'] = sg
_space_group_table['Cc:-b2'] = sg
_space_group_table['9:-b2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^4', 'I -2yc', 'I1c1', 'Cc:-b3', '9:-b3'], transformations)
_space_group_table['Cs^4'] = sg
_space_group_table['I -2yc'] = sg
_space_group_table['I1c1'] = sg
_space_group_table['Cc:-b3'] = sg
_space_group_table['9:-b3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^4', 'A -2a', 'A11a', 'Cc:c1', '9:c1'], transformations)
_space_group_table['Cs^4'] = sg
_space_group_table['A -2a'] = sg
_space_group_table['A11a'] = sg
_space_group_table['Cc:c1'] = sg
_space_group_table['9:c1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^4', 'B -2bc', 'B11n', 'Cc:c2', '9:c2'], transformations)
_space_group_table['Cs^4'] = sg
_space_group_table['B -2bc'] = sg
_space_group_table['B11n'] = sg
_space_group_table['Cc:c2'] = sg
_space_group_table['9:c2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^4', 'I -2b', 'I11b', 'Cc:c3', '9:c3'], transformations)
_space_group_table['Cs^4'] = sg
_space_group_table['I -2b'] = sg
_space_group_table['I11b'] = sg
_space_group_table['Cc:c3'] = sg
_space_group_table['9:c3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^4', 'B -2b', 'Bb', 'B11b', 'Cc:-c1', '9:-c1'], transformations)
_space_group_table['Cs^4'] = sg
_space_group_table['B -2b'] = sg
_space_group_table['Bb'] = sg
_space_group_table['B11b'] = sg
_space_group_table['Cc:-c1'] = sg
_space_group_table['9:-c1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^4', 'A -2ac', 'A11n', 'Cc:-c2', '9:-c2'], transformations)
_space_group_table['Cs^4'] = sg
_space_group_table['A -2ac'] = sg
_space_group_table['A11n'] = sg
_space_group_table['Cc:-c2'] = sg
_space_group_table['9:-c2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^4', 'I -2a', 'I11a', 'Cc:-c3', '9:-c3'], transformations)
_space_group_table['Cs^4'] = sg
_space_group_table['I -2a'] = sg
_space_group_table['I11a'] = sg
_space_group_table['Cc:-c3'] = sg
_space_group_table['9:-c3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^4', 'B -2xb', 'Bb11', 'Cc:a1', '9:a1'], transformations)
_space_group_table['Cs^4'] = sg
_space_group_table['B -2xb'] = sg
_space_group_table['Bb11'] = sg
_space_group_table['Cc:a1'] = sg
_space_group_table['9:a1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^4', 'C -2xbc', 'Cn11', 'Cc:a2', '9:a2'], transformations)
_space_group_table['Cs^4'] = sg
_space_group_table['C -2xbc'] = sg
_space_group_table['Cn11'] = sg
_space_group_table['Cc:a2'] = sg
_space_group_table['9:a2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^4', 'I -2xc', 'Ic11', 'Cc:a3', '9:a3'], transformations)
_space_group_table['Cs^4'] = sg
_space_group_table['I -2xc'] = sg
_space_group_table['Ic11'] = sg
_space_group_table['Cc:a3'] = sg
_space_group_table['9:a3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^4', 'C -2xc', 'Cc11', 'Cc:-a1', '9:-a1'], transformations)
_space_group_table['Cs^4'] = sg
_space_group_table['C -2xc'] = sg
_space_group_table['Cc11'] = sg
_space_group_table['Cc:-a1'] = sg
_space_group_table['9:-a1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^4', 'B -2xbc', 'Bn11', 'Cc:-a2', '9:-a2'], transformations)
_space_group_table['Cs^4'] = sg
_space_group_table['B -2xbc'] = sg
_space_group_table['Bn11'] = sg
_space_group_table['Cc:-a2'] = sg
_space_group_table['9:-a2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Cs^4', 'I -2xb', 'Ib11', 'Cc:-a3', '9:-a3'], transformations)
_space_group_table['Cs^4'] = sg
_space_group_table['I -2xb'] = sg
_space_group_table['Ib11'] = sg
_space_group_table['Cc:-a3'] = sg
_space_group_table['9:-a3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^1', '-P 2y', 'P12/m1', 'P2/m:b', '10:b'], transformations)
_space_group_table['C2h^1'] = sg
_space_group_table['-P 2y'] = sg
_space_group_table['P12/m1'] = sg
_space_group_table['P2/m:b'] = sg
_space_group_table['10:b'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^1', '-P 2', 'P112/m', 'P2/m:c', '10:c'], transformations)
_space_group_table['C2h^1'] = sg
_space_group_table['-P 2'] = sg
_space_group_table['P112/m'] = sg
_space_group_table['P2/m:c'] = sg
_space_group_table['10:c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^1', '-P 2x', 'P2/m11', 'P2/m:a', '10:a'], transformations)
_space_group_table['C2h^1'] = sg
_space_group_table['-P 2x'] = sg
_space_group_table['P2/m11'] = sg
_space_group_table['P2/m:a'] = sg
_space_group_table['10:a'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^2', '-P 2yb', 'P121/m1', 'P21/m:b', '11:b'], transformations)
_space_group_table['C2h^2'] = sg
_space_group_table['-P 2yb'] = sg
_space_group_table['P121/m1'] = sg
_space_group_table['P21/m:b'] = sg
_space_group_table['11:b'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^2', '-P 2c', 'P1121/m', 'P21/m:c', '11:c'], transformations)
_space_group_table['C2h^2'] = sg
_space_group_table['-P 2c'] = sg
_space_group_table['P1121/m'] = sg
_space_group_table['P21/m:c'] = sg
_space_group_table['11:c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^2', '-P 2xa', 'P21/m11', 'P21/m:a', '11:a'], transformations)
_space_group_table['C2h^2'] = sg
_space_group_table['-P 2xa'] = sg
_space_group_table['P21/m11'] = sg
_space_group_table['P21/m:a'] = sg
_space_group_table['11:a'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^3', '-C 2y', 'C12/m1', 'C2/m:b1', '12:b1'], transformations)
_space_group_table['C2h^3'] = sg
_space_group_table['-C 2y'] = sg
_space_group_table['C12/m1'] = sg
_space_group_table['C2/m:b1'] = sg
_space_group_table['12:b1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^3', '-A 2y', 'A12/m1', 'C2/m:b2', '12:b2'], transformations)
_space_group_table['C2h^3'] = sg
_space_group_table['-A 2y'] = sg
_space_group_table['A12/m1'] = sg
_space_group_table['C2/m:b2'] = sg
_space_group_table['12:b2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^3', '-I 2y', 'I12/m1', 'C2/m:b3', '12:b3'], transformations)
_space_group_table['C2h^3'] = sg
_space_group_table['-I 2y'] = sg
_space_group_table['I12/m1'] = sg
_space_group_table['C2/m:b3'] = sg
_space_group_table['12:b3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^3', '-A 2', 'A112/m', 'C2/m:c1', '12:c1'], transformations)
_space_group_table['C2h^3'] = sg
_space_group_table['-A 2'] = sg
_space_group_table['A112/m'] = sg
_space_group_table['C2/m:c1'] = sg
_space_group_table['12:c1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^3', '-B 2', 'B2/m', 'B112/m', 'C2/m:c2', '12:c2'], transformations)
_space_group_table['C2h^3'] = sg
_space_group_table['-B 2'] = sg
_space_group_table['B2/m'] = sg
_space_group_table['B112/m'] = sg
_space_group_table['C2/m:c2'] = sg
_space_group_table['12:c2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^3', '-I 2', 'I112/m', 'C2/m:c3', '12:c3'], transformations)
_space_group_table['C2h^3'] = sg
_space_group_table['-I 2'] = sg
_space_group_table['I112/m'] = sg
_space_group_table['C2/m:c3'] = sg
_space_group_table['12:c3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^3', '-B 2x', 'B2/m11', 'C2/m:a1', '12:a1'], transformations)
_space_group_table['C2h^3'] = sg
_space_group_table['-B 2x'] = sg
_space_group_table['B2/m11'] = sg
_space_group_table['C2/m:a1'] = sg
_space_group_table['12:a1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^3', '-C 2x', 'C2/m11', 'C2/m:a2', '12:a2'], transformations)
_space_group_table['C2h^3'] = sg
_space_group_table['-C 2x'] = sg
_space_group_table['C2/m11'] = sg
_space_group_table['C2/m:a2'] = sg
_space_group_table['12:a2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^3', '-I 2x', 'I2/m11', 'C2/m:a3', '12:a3'], transformations)
_space_group_table['C2h^3'] = sg
_space_group_table['-I 2x'] = sg
_space_group_table['I2/m11'] = sg
_space_group_table['C2/m:a3'] = sg
_space_group_table['12:a3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^4', '-P 2yc', 'P12/c1', 'P2/c:b1', '13:b1'], transformations)
_space_group_table['C2h^4'] = sg
_space_group_table['-P 2yc'] = sg
_space_group_table['P12/c1'] = sg
_space_group_table['P2/c:b1'] = sg
_space_group_table['13:b1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^4', '-P 2yac', 'P12/n1', 'P2/c:b2', '13:b2'], transformations)
_space_group_table['C2h^4'] = sg
_space_group_table['-P 2yac'] = sg
_space_group_table['P12/n1'] = sg
_space_group_table['P2/c:b2'] = sg
_space_group_table['13:b2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^4', '-P 2ya', 'P12/a1', 'P2/c:b3', '13:b3'], transformations)
_space_group_table['C2h^4'] = sg
_space_group_table['-P 2ya'] = sg
_space_group_table['P12/a1'] = sg
_space_group_table['P2/c:b3'] = sg
_space_group_table['13:b3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^4', '-P 2a', 'P112/a', 'P2/c:c1', '13:c1'], transformations)
_space_group_table['C2h^4'] = sg
_space_group_table['-P 2a'] = sg
_space_group_table['P112/a'] = sg
_space_group_table['P2/c:c1'] = sg
_space_group_table['13:c1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^4', '-P 2ab', 'P112/n', 'P2/c:c2', '13:c2'], transformations)
_space_group_table['C2h^4'] = sg
_space_group_table['-P 2ab'] = sg
_space_group_table['P112/n'] = sg
_space_group_table['P2/c:c2'] = sg
_space_group_table['13:c2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^4', '-P 2b', 'P2/b', 'P112/b', 'P2/c:c3', '13:c3'], transformations)
_space_group_table['C2h^4'] = sg
_space_group_table['-P 2b'] = sg
_space_group_table['P2/b'] = sg
_space_group_table['P112/b'] = sg
_space_group_table['P2/c:c3'] = sg
_space_group_table['13:c3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^4', '-P 2xb', 'P2/b11', 'P2/c:a1', '13:a1'], transformations)
_space_group_table['C2h^4'] = sg
_space_group_table['-P 2xb'] = sg
_space_group_table['P2/b11'] = sg
_space_group_table['P2/c:a1'] = sg
_space_group_table['13:a1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^4', '-P 2xbc', 'P2/n11', 'P2/c:a2', '13:a2'], transformations)
_space_group_table['C2h^4'] = sg
_space_group_table['-P 2xbc'] = sg
_space_group_table['P2/n11'] = sg
_space_group_table['P2/c:a2'] = sg
_space_group_table['13:a2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^4', '-P 2xc', 'P2/c11', 'P2/c:a3', '13:a3'], transformations)
_space_group_table['C2h^4'] = sg
_space_group_table['-P 2xc'] = sg
_space_group_table['P2/c11'] = sg
_space_group_table['P2/c:a3'] = sg
_space_group_table['13:a3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^5', '-P 2ybc', 'P121/c1', 'P21/c:b1', '14:b1'], transformations)
_space_group_table['C2h^5'] = sg
_space_group_table['-P 2ybc'] = sg
_space_group_table['P121/c1'] = sg
_space_group_table['P21/c:b1'] = sg
_space_group_table['14:b1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^5', '-P 2yn', 'P121/n1', 'P21/c:b2', '14:b2'], transformations)
_space_group_table['C2h^5'] = sg
_space_group_table['-P 2yn'] = sg
_space_group_table['P121/n1'] = sg
_space_group_table['P21/c:b2'] = sg
_space_group_table['14:b2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^5', '-P 2yab', 'P121/a1', 'P21/c:b3', '14:b3'], transformations)
_space_group_table['C2h^5'] = sg
_space_group_table['-P 2yab'] = sg
_space_group_table['P121/a1'] = sg
_space_group_table['P21/c:b3'] = sg
_space_group_table['14:b3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^5', '-P 2ac', 'P1121/a', 'P21/c:c1', '14:c1'], transformations)
_space_group_table['C2h^5'] = sg
_space_group_table['-P 2ac'] = sg
_space_group_table['P1121/a'] = sg
_space_group_table['P21/c:c1'] = sg
_space_group_table['14:c1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^5', '-P 2n', 'P1121/n', 'P21/c:c2', '14:c2'], transformations)
_space_group_table['C2h^5'] = sg
_space_group_table['-P 2n'] = sg
_space_group_table['P1121/n'] = sg
_space_group_table['P21/c:c2'] = sg
_space_group_table['14:c2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^5', '-P 2bc', 'P21/b', 'P1121/b', 'P21/c:c3', '14:c3'], transformations)
_space_group_table['C2h^5'] = sg
_space_group_table['-P 2bc'] = sg
_space_group_table['P21/b'] = sg
_space_group_table['P1121/b'] = sg
_space_group_table['P21/c:c3'] = sg
_space_group_table['14:c3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^5', '-P 2xab', 'P21/b11', 'P21/c:a1', '14:a1'], transformations)
_space_group_table['C2h^5'] = sg
_space_group_table['-P 2xab'] = sg
_space_group_table['P21/b11'] = sg
_space_group_table['P21/c:a1'] = sg
_space_group_table['14:a1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^5', '-P 2xn', 'P21/n11', 'P21/c:a2', '14:a2'], transformations)
_space_group_table['C2h^5'] = sg
_space_group_table['-P 2xn'] = sg
_space_group_table['P21/n11'] = sg
_space_group_table['P21/c:a2'] = sg
_space_group_table['14:a2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^5', '-P 2xac', 'P21/c11', 'P21/c:a3', '14:a3'], transformations)
_space_group_table['C2h^5'] = sg
_space_group_table['-P 2xac'] = sg
_space_group_table['P21/c11'] = sg
_space_group_table['P21/c:a3'] = sg
_space_group_table['14:a3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^6', '-C 2yc', 'C12/c1', 'C2/c:b1', '15:b1'], transformations)
_space_group_table['C2h^6'] = sg
_space_group_table['-C 2yc'] = sg
_space_group_table['C12/c1'] = sg
_space_group_table['C2/c:b1'] = sg
_space_group_table['15:b1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^6', '-A 2yac', 'A12/n1', 'C2/c:b2', '15:b2'], transformations)
_space_group_table['C2h^6'] = sg
_space_group_table['-A 2yac'] = sg
_space_group_table['A12/n1'] = sg
_space_group_table['C2/c:b2'] = sg
_space_group_table['15:b2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^6', '-I 2ya', 'I12/a1', 'C2/c:b3', '15:b3'], transformations)
_space_group_table['C2h^6'] = sg
_space_group_table['-I 2ya'] = sg
_space_group_table['I12/a1'] = sg
_space_group_table['C2/c:b3'] = sg
_space_group_table['15:b3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^6', '-A 2ya', 'A12/a1', 'C2/c:-b1', '15:-b1'], transformations)
_space_group_table['C2h^6'] = sg
_space_group_table['-A 2ya'] = sg
_space_group_table['A12/a1'] = sg
_space_group_table['C2/c:-b1'] = sg
_space_group_table['15:-b1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^6', '-C 2ybc', 'C12/n1', 'C2/c:-b2', '15:-b2'], transformations)
_space_group_table['C2h^6'] = sg
_space_group_table['-C 2ybc'] = sg
_space_group_table['C12/n1'] = sg
_space_group_table['C2/c:-b2'] = sg
_space_group_table['15:-b2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^6', '-I 2yc', 'I12/c1', 'C2/c:-b3', '15:-b3'], transformations)
_space_group_table['C2h^6'] = sg
_space_group_table['-I 2yc'] = sg
_space_group_table['I12/c1'] = sg
_space_group_table['C2/c:-b3'] = sg
_space_group_table['15:-b3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^6', '-A 2a', 'A112/a', 'C2/c:c1', '15:c1'], transformations)
_space_group_table['C2h^6'] = sg
_space_group_table['-A 2a'] = sg
_space_group_table['A112/a'] = sg
_space_group_table['C2/c:c1'] = sg
_space_group_table['15:c1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^6', '-B 2bc', 'B112/n', 'C2/c:c2', '15:c2'], transformations)
_space_group_table['C2h^6'] = sg
_space_group_table['-B 2bc'] = sg
_space_group_table['B112/n'] = sg
_space_group_table['C2/c:c2'] = sg
_space_group_table['15:c2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^6', '-I 2b', 'I112/b', 'C2/c:c3', '15:c3'], transformations)
_space_group_table['C2h^6'] = sg
_space_group_table['-I 2b'] = sg
_space_group_table['I112/b'] = sg
_space_group_table['C2/c:c3'] = sg
_space_group_table['15:c3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^6', '-B 2b', 'B2/b', 'B112/b', 'C2/c:-c1', '15:-c1'], transformations)
_space_group_table['C2h^6'] = sg
_space_group_table['-B 2b'] = sg
_space_group_table['B2/b'] = sg
_space_group_table['B112/b'] = sg
_space_group_table['C2/c:-c1'] = sg
_space_group_table['15:-c1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^6', '-A 2ac', 'A112/n', 'C2/c:-c2', '15:-c2'], transformations)
_space_group_table['C2h^6'] = sg
_space_group_table['-A 2ac'] = sg
_space_group_table['A112/n'] = sg
_space_group_table['C2/c:-c2'] = sg
_space_group_table['15:-c2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^6', '-I 2a', 'I112/a', 'C2/c:-c3', '15:-c3'], transformations)
_space_group_table['C2h^6'] = sg
_space_group_table['-I 2a'] = sg
_space_group_table['I112/a'] = sg
_space_group_table['C2/c:-c3'] = sg
_space_group_table['15:-c3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^6', '-B 2xb', 'B2/b11', 'C2/c:a1', '15:a1'], transformations)
_space_group_table['C2h^6'] = sg
_space_group_table['-B 2xb'] = sg
_space_group_table['B2/b11'] = sg
_space_group_table['C2/c:a1'] = sg
_space_group_table['15:a1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^6', '-C 2xbc', 'C2/n11', 'C2/c:a2', '15:a2'], transformations)
_space_group_table['C2h^6'] = sg
_space_group_table['-C 2xbc'] = sg
_space_group_table['C2/n11'] = sg
_space_group_table['C2/c:a2'] = sg
_space_group_table['15:a2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^6', '-I 2xc', 'I2/c11', 'C2/c:a3', '15:a3'], transformations)
_space_group_table['C2h^6'] = sg
_space_group_table['-I 2xc'] = sg
_space_group_table['I2/c11'] = sg
_space_group_table['C2/c:a3'] = sg
_space_group_table['15:a3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^6', '-C 2xc', 'C2/c11', 'C2/c:-a1', '15:-a1'], transformations)
_space_group_table['C2h^6'] = sg
_space_group_table['-C 2xc'] = sg
_space_group_table['C2/c11'] = sg
_space_group_table['C2/c:-a1'] = sg
_space_group_table['15:-a1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^6', '-B 2xbc', 'B2/n11', 'C2/c:-a2', '15:-a2'], transformations)
_space_group_table['C2h^6'] = sg
_space_group_table['-B 2xbc'] = sg
_space_group_table['B2/n11'] = sg
_space_group_table['C2/c:-a2'] = sg
_space_group_table['15:-a2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2h^6', '-I 2xb', 'I2/b11', 'C2/c:-a3', '15:-a3'], transformations)
_space_group_table['C2h^6'] = sg
_space_group_table['-I 2xb'] = sg
_space_group_table['I2/b11'] = sg
_space_group_table['C2/c:-a3'] = sg
_space_group_table['15:-a3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2^1', '16', 'P 2 2', 'P222'], transformations)
_space_group_table['D2^1'] = sg
_space_group_table['16'] = sg
_space_group_table['P 2 2'] = sg
_space_group_table['P222'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2^2', '17', 'P 2c 2', 'P2221'], transformations)
_space_group_table['D2^2'] = sg
_space_group_table['17'] = sg
_space_group_table['P 2c 2'] = sg
_space_group_table['P2221'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2^2', 'P 2a 2a', 'P2122', '17:cab'], transformations)
_space_group_table['D2^2'] = sg
_space_group_table['P 2a 2a'] = sg
_space_group_table['P2122'] = sg
_space_group_table['17:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2^2', 'P 2 2b', 'P2212', '17:bca'], transformations)
_space_group_table['D2^2'] = sg
_space_group_table['P 2 2b'] = sg
_space_group_table['P2212'] = sg
_space_group_table['17:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2^3', '18', 'P 2 2ab', 'P21212'], transformations)
_space_group_table['D2^3'] = sg
_space_group_table['18'] = sg
_space_group_table['P 2 2ab'] = sg
_space_group_table['P21212'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2^3', 'P 2bc 2', 'P22121', '18:cab'], transformations)
_space_group_table['D2^3'] = sg
_space_group_table['P 2bc 2'] = sg
_space_group_table['P22121'] = sg
_space_group_table['18:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2^3', 'P 2ac 2ac', 'P21221', '18:bca'], transformations)
_space_group_table['D2^3'] = sg
_space_group_table['P 2ac 2ac'] = sg
_space_group_table['P21221'] = sg
_space_group_table['18:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2^4', '19', 'P 2ac 2ab', 'P212121'], transformations)
_space_group_table['D2^4'] = sg
_space_group_table['19'] = sg
_space_group_table['P 2ac 2ab'] = sg
_space_group_table['P212121'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2^5', '20', 'C 2c 2', 'C2221'], transformations)
_space_group_table['D2^5'] = sg
_space_group_table['20'] = sg
_space_group_table['C 2c 2'] = sg
_space_group_table['C2221'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2^5', 'A 2a 2a', 'A2122', '20:cab'], transformations)
_space_group_table['D2^5'] = sg
_space_group_table['A 2a 2a'] = sg
_space_group_table['A2122'] = sg
_space_group_table['20:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2^5', 'B 2 2b', 'B2212', '20:bca'], transformations)
_space_group_table['D2^5'] = sg
_space_group_table['B 2 2b'] = sg
_space_group_table['B2212'] = sg
_space_group_table['20:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2^6', '21', 'C 2 2', 'C222'], transformations)
_space_group_table['D2^6'] = sg
_space_group_table['21'] = sg
_space_group_table['C 2 2'] = sg
_space_group_table['C222'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2^6', 'A 2 2', 'A222', '21:cab'], transformations)
_space_group_table['D2^6'] = sg
_space_group_table['A 2 2'] = sg
_space_group_table['A222'] = sg
_space_group_table['21:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2^6', 'B 2 2', 'B222', '21:bca'], transformations)
_space_group_table['D2^6'] = sg
_space_group_table['B 2 2'] = sg
_space_group_table['B222'] = sg
_space_group_table['21:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2^7', '22', 'F 2 2', 'F222'], transformations)
_space_group_table['D2^7'] = sg
_space_group_table['22'] = sg
_space_group_table['F 2 2'] = sg
_space_group_table['F222'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2^8', '23', 'I 2 2', 'I222'], transformations)
_space_group_table['D2^8'] = sg
_space_group_table['23'] = sg
_space_group_table['I 2 2'] = sg
_space_group_table['I222'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2^9', '24', 'I 2b 2c', 'I212121'], transformations)
_space_group_table['D2^9'] = sg
_space_group_table['24'] = sg
_space_group_table['I 2b 2c'] = sg
_space_group_table['I212121'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^1', '25', 'P 2 -2', 'Pmm2'], transformations)
_space_group_table['C2v^1'] = sg
_space_group_table['25'] = sg
_space_group_table['P 2 -2'] = sg
_space_group_table['Pmm2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^1', 'P -2 2', 'P2mm', '25:cab'], transformations)
_space_group_table['C2v^1'] = sg
_space_group_table['P -2 2'] = sg
_space_group_table['P2mm'] = sg
_space_group_table['25:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^1', 'P -2 -2', 'Pm2m', '25:bca'], transformations)
_space_group_table['C2v^1'] = sg
_space_group_table['P -2 -2'] = sg
_space_group_table['Pm2m'] = sg
_space_group_table['25:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^2', '26', 'P 2c -2', 'Pmc21'], transformations)
_space_group_table['C2v^2'] = sg
_space_group_table['26'] = sg
_space_group_table['P 2c -2'] = sg
_space_group_table['Pmc21'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^2', 'P 2c -2c', 'Pcm21', '26:ba-c'], transformations)
_space_group_table['C2v^2'] = sg
_space_group_table['P 2c -2c'] = sg
_space_group_table['Pcm21'] = sg
_space_group_table['26:ba-c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^2', 'P -2a 2a', 'P21ma', '26:cab'], transformations)
_space_group_table['C2v^2'] = sg
_space_group_table['P -2a 2a'] = sg
_space_group_table['P21ma'] = sg
_space_group_table['26:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^2', 'P -2 2a', 'P21am', '26:-cba'], transformations)
_space_group_table['C2v^2'] = sg
_space_group_table['P -2 2a'] = sg
_space_group_table['P21am'] = sg
_space_group_table['26:-cba'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^2', 'P -2 -2b', 'Pb21m', '26:bca'], transformations)
_space_group_table['C2v^2'] = sg
_space_group_table['P -2 -2b'] = sg
_space_group_table['Pb21m'] = sg
_space_group_table['26:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^2', 'P -2b -2', 'Pm21b', '26:a-cb'], transformations)
_space_group_table['C2v^2'] = sg
_space_group_table['P -2b -2'] = sg
_space_group_table['Pm21b'] = sg
_space_group_table['26:a-cb'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^3', '27', 'P 2 -2c', 'Pcc2'], transformations)
_space_group_table['C2v^3'] = sg
_space_group_table['27'] = sg
_space_group_table['P 2 -2c'] = sg
_space_group_table['Pcc2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^3', 'P -2a 2', 'P2aa', '27:cab'], transformations)
_space_group_table['C2v^3'] = sg
_space_group_table['P -2a 2'] = sg
_space_group_table['P2aa'] = sg
_space_group_table['27:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^3', 'P -2b -2b', 'Pb2b', '27:bca'], transformations)
_space_group_table['C2v^3'] = sg
_space_group_table['P -2b -2b'] = sg
_space_group_table['Pb2b'] = sg
_space_group_table['27:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^4', '28', 'P 2 -2a', 'Pma2'], transformations)
_space_group_table['C2v^4'] = sg
_space_group_table['28'] = sg
_space_group_table['P 2 -2a'] = sg
_space_group_table['Pma2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^4', 'P 2 -2b', 'Pbm2', '28:ba-c'], transformations)
_space_group_table['C2v^4'] = sg
_space_group_table['P 2 -2b'] = sg
_space_group_table['Pbm2'] = sg
_space_group_table['28:ba-c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^4', 'P -2b 2', 'P2mb', '28:cab'], transformations)
_space_group_table['C2v^4'] = sg
_space_group_table['P -2b 2'] = sg
_space_group_table['P2mb'] = sg
_space_group_table['28:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^4', 'P -2c 2', 'P2cm', '28:-cba'], transformations)
_space_group_table['C2v^4'] = sg
_space_group_table['P -2c 2'] = sg
_space_group_table['P2cm'] = sg
_space_group_table['28:-cba'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^4', 'P -2c -2c', 'Pc2m', '28:bca'], transformations)
_space_group_table['C2v^4'] = sg
_space_group_table['P -2c -2c'] = sg
_space_group_table['Pc2m'] = sg
_space_group_table['28:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^4', 'P -2a -2a', 'Pm2a', '28:a-cb'], transformations)
_space_group_table['C2v^4'] = sg
_space_group_table['P -2a -2a'] = sg
_space_group_table['Pm2a'] = sg
_space_group_table['28:a-cb'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^5', '29', 'P 2c -2ac', 'Pca21'], transformations)
_space_group_table['C2v^5'] = sg
_space_group_table['29'] = sg
_space_group_table['P 2c -2ac'] = sg
_space_group_table['Pca21'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^5', 'P 2c -2b', 'Pbc21', '29:ba-c'], transformations)
_space_group_table['C2v^5'] = sg
_space_group_table['P 2c -2b'] = sg
_space_group_table['Pbc21'] = sg
_space_group_table['29:ba-c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^5', 'P -2b 2a', 'P21ab', '29:cab'], transformations)
_space_group_table['C2v^5'] = sg
_space_group_table['P -2b 2a'] = sg
_space_group_table['P21ab'] = sg
_space_group_table['29:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^5', 'P -2ac 2a', 'P21ca', '29:-cba'], transformations)
_space_group_table['C2v^5'] = sg
_space_group_table['P -2ac 2a'] = sg
_space_group_table['P21ca'] = sg
_space_group_table['29:-cba'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^5', 'P -2bc -2c', 'Pc21b', '29:bca'], transformations)
_space_group_table['C2v^5'] = sg
_space_group_table['P -2bc -2c'] = sg
_space_group_table['Pc21b'] = sg
_space_group_table['29:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^5', 'P -2a -2ab', 'Pb21a', '29:a-cb'], transformations)
_space_group_table['C2v^5'] = sg
_space_group_table['P -2a -2ab'] = sg
_space_group_table['Pb21a'] = sg
_space_group_table['29:a-cb'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^6', '30', 'P 2 -2bc', 'Pnc2'], transformations)
_space_group_table['C2v^6'] = sg
_space_group_table['30'] = sg
_space_group_table['P 2 -2bc'] = sg
_space_group_table['Pnc2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^6', 'P 2 -2ac', 'Pcn2', '30:ba-c'], transformations)
_space_group_table['C2v^6'] = sg
_space_group_table['P 2 -2ac'] = sg
_space_group_table['Pcn2'] = sg
_space_group_table['30:ba-c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^6', 'P -2ac 2', 'P2na', '30:cab'], transformations)
_space_group_table['C2v^6'] = sg
_space_group_table['P -2ac 2'] = sg
_space_group_table['P2na'] = sg
_space_group_table['30:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^6', 'P -2ab 2', 'P2an', '30:-cba'], transformations)
_space_group_table['C2v^6'] = sg
_space_group_table['P -2ab 2'] = sg
_space_group_table['P2an'] = sg
_space_group_table['30:-cba'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^6', 'P -2ab -2ab', 'Pb2n', '30:bca'], transformations)
_space_group_table['C2v^6'] = sg
_space_group_table['P -2ab -2ab'] = sg
_space_group_table['Pb2n'] = sg
_space_group_table['30:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^6', 'P -2bc -2bc', 'Pn2b', '30:a-cb'], transformations)
_space_group_table['C2v^6'] = sg
_space_group_table['P -2bc -2bc'] = sg
_space_group_table['Pn2b'] = sg
_space_group_table['30:a-cb'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^7', '31', 'P 2ac -2', 'Pmn21'], transformations)
_space_group_table['C2v^7'] = sg
_space_group_table['31'] = sg
_space_group_table['P 2ac -2'] = sg
_space_group_table['Pmn21'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^7', 'P 2bc -2bc', 'Pnm21', '31:ba-c'], transformations)
_space_group_table['C2v^7'] = sg
_space_group_table['P 2bc -2bc'] = sg
_space_group_table['Pnm21'] = sg
_space_group_table['31:ba-c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^7', 'P -2ab 2ab', 'P21mn', '31:cab'], transformations)
_space_group_table['C2v^7'] = sg
_space_group_table['P -2ab 2ab'] = sg
_space_group_table['P21mn'] = sg
_space_group_table['31:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^7', 'P -2 2ac', 'P21nm', '31:-cba'], transformations)
_space_group_table['C2v^7'] = sg
_space_group_table['P -2 2ac'] = sg
_space_group_table['P21nm'] = sg
_space_group_table['31:-cba'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^7', 'P -2 -2bc', 'Pn21m', '31:bca'], transformations)
_space_group_table['C2v^7'] = sg
_space_group_table['P -2 -2bc'] = sg
_space_group_table['Pn21m'] = sg
_space_group_table['31:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^7', 'P -2ab -2', 'Pm21n', '31:a-cb'], transformations)
_space_group_table['C2v^7'] = sg
_space_group_table['P -2ab -2'] = sg
_space_group_table['Pm21n'] = sg
_space_group_table['31:a-cb'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^8', '32', 'P 2 -2ab', 'Pba2'], transformations)
_space_group_table['C2v^8'] = sg
_space_group_table['32'] = sg
_space_group_table['P 2 -2ab'] = sg
_space_group_table['Pba2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^8', 'P -2bc 2', 'P2cb', '32:cab'], transformations)
_space_group_table['C2v^8'] = sg
_space_group_table['P -2bc 2'] = sg
_space_group_table['P2cb'] = sg
_space_group_table['32:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^8', 'P -2ac -2ac', 'Pc2a', '32:bca'], transformations)
_space_group_table['C2v^8'] = sg
_space_group_table['P -2ac -2ac'] = sg
_space_group_table['Pc2a'] = sg
_space_group_table['32:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^9', '33', 'P 2c -2n', 'Pna21'], transformations)
_space_group_table['C2v^9'] = sg
_space_group_table['33'] = sg
_space_group_table['P 2c -2n'] = sg
_space_group_table['Pna21'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^9', 'P 2c -2ab', 'Pbn21', '33:ba-c'], transformations)
_space_group_table['C2v^9'] = sg
_space_group_table['P 2c -2ab'] = sg
_space_group_table['Pbn21'] = sg
_space_group_table['33:ba-c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^9', 'P -2bc 2a', 'P21nb', '33:cab'], transformations)
_space_group_table['C2v^9'] = sg
_space_group_table['P -2bc 2a'] = sg
_space_group_table['P21nb'] = sg
_space_group_table['33:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^9', 'P -2n 2a', 'P21cn', '33:-cba'], transformations)
_space_group_table['C2v^9'] = sg
_space_group_table['P -2n 2a'] = sg
_space_group_table['P21cn'] = sg
_space_group_table['33:-cba'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^9', 'P -2n -2ac', 'Pc21n', '33:bca'], transformations)
_space_group_table['C2v^9'] = sg
_space_group_table['P -2n -2ac'] = sg
_space_group_table['Pc21n'] = sg
_space_group_table['33:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^9', 'P -2ac -2n', 'Pn21a', '33:a-cb'], transformations)
_space_group_table['C2v^9'] = sg
_space_group_table['P -2ac -2n'] = sg
_space_group_table['Pn21a'] = sg
_space_group_table['33:a-cb'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^10', '34', 'P 2 -2n', 'Pnn2'], transformations)
_space_group_table['C2v^10'] = sg
_space_group_table['34'] = sg
_space_group_table['P 2 -2n'] = sg
_space_group_table['Pnn2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^10', 'P -2n 2', 'P2nn', '34:cab'], transformations)
_space_group_table['C2v^10'] = sg
_space_group_table['P -2n 2'] = sg
_space_group_table['P2nn'] = sg
_space_group_table['34:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^10', 'P -2n -2n', 'Pn2n', '34:bca'], transformations)
_space_group_table['C2v^10'] = sg
_space_group_table['P -2n -2n'] = sg
_space_group_table['Pn2n'] = sg
_space_group_table['34:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^11', '35', 'C 2 -2', 'Cmm2'], transformations)
_space_group_table['C2v^11'] = sg
_space_group_table['35'] = sg
_space_group_table['C 2 -2'] = sg
_space_group_table['Cmm2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^11', 'A -2 2', 'A2mm', '35:cab'], transformations)
_space_group_table['C2v^11'] = sg
_space_group_table['A -2 2'] = sg
_space_group_table['A2mm'] = sg
_space_group_table['35:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^11', 'B -2 -2', 'Bm2m', '35:bca'], transformations)
_space_group_table['C2v^11'] = sg
_space_group_table['B -2 -2'] = sg
_space_group_table['Bm2m'] = sg
_space_group_table['35:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^12', '36', 'C 2c -2', 'Cmc21'], transformations)
_space_group_table['C2v^12'] = sg
_space_group_table['36'] = sg
_space_group_table['C 2c -2'] = sg
_space_group_table['Cmc21'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^12', 'C 2c -2c', 'Ccm21', '36:ba-c'], transformations)
_space_group_table['C2v^12'] = sg
_space_group_table['C 2c -2c'] = sg
_space_group_table['Ccm21'] = sg
_space_group_table['36:ba-c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^12', 'A -2a 2a', 'A21ma', '36:cab'], transformations)
_space_group_table['C2v^12'] = sg
_space_group_table['A -2a 2a'] = sg
_space_group_table['A21ma'] = sg
_space_group_table['36:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^12', 'A -2 2a', 'A21am', '36:-cba'], transformations)
_space_group_table['C2v^12'] = sg
_space_group_table['A -2 2a'] = sg
_space_group_table['A21am'] = sg
_space_group_table['36:-cba'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^12', 'B -2 -2b', 'Bb21m', '36:bca'], transformations)
_space_group_table['C2v^12'] = sg
_space_group_table['B -2 -2b'] = sg
_space_group_table['Bb21m'] = sg
_space_group_table['36:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^12', 'B -2b -2', 'Bm21b', '36:a-cb'], transformations)
_space_group_table['C2v^12'] = sg
_space_group_table['B -2b -2'] = sg
_space_group_table['Bm21b'] = sg
_space_group_table['36:a-cb'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^13', '37', 'C 2 -2c', 'Ccc2'], transformations)
_space_group_table['C2v^13'] = sg
_space_group_table['37'] = sg
_space_group_table['C 2 -2c'] = sg
_space_group_table['Ccc2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^13', 'A -2a 2', 'A2aa', '37:cab'], transformations)
_space_group_table['C2v^13'] = sg
_space_group_table['A -2a 2'] = sg
_space_group_table['A2aa'] = sg
_space_group_table['37:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^13', 'B -2b -2b', 'Bb2b', '37:bca'], transformations)
_space_group_table['C2v^13'] = sg
_space_group_table['B -2b -2b'] = sg
_space_group_table['Bb2b'] = sg
_space_group_table['37:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^14', '38', 'A 2 -2', 'Amm2'], transformations)
_space_group_table['C2v^14'] = sg
_space_group_table['38'] = sg
_space_group_table['A 2 -2'] = sg
_space_group_table['Amm2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^14', 'B 2 -2', 'Bmm2', '38:ba-c'], transformations)
_space_group_table['C2v^14'] = sg
_space_group_table['B 2 -2'] = sg
_space_group_table['Bmm2'] = sg
_space_group_table['38:ba-c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^14', 'B -2 2', 'B2mm', '38:cab'], transformations)
_space_group_table['C2v^14'] = sg
_space_group_table['B -2 2'] = sg
_space_group_table['B2mm'] = sg
_space_group_table['38:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^14', 'C -2 2', 'C2mm', '38:-cba'], transformations)
_space_group_table['C2v^14'] = sg
_space_group_table['C -2 2'] = sg
_space_group_table['C2mm'] = sg
_space_group_table['38:-cba'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^14', 'C -2 -2', 'Cm2m', '38:bca'], transformations)
_space_group_table['C2v^14'] = sg
_space_group_table['C -2 -2'] = sg
_space_group_table['Cm2m'] = sg
_space_group_table['38:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^14', 'A -2 -2', 'Am2m', '38:a-cb'], transformations)
_space_group_table['C2v^14'] = sg
_space_group_table['A -2 -2'] = sg
_space_group_table['Am2m'] = sg
_space_group_table['38:a-cb'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^15', '39', 'A 2 -2c', 'Abm2'], transformations)
_space_group_table['C2v^15'] = sg
_space_group_table['39'] = sg
_space_group_table['A 2 -2c'] = sg
_space_group_table['Abm2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^15', 'B 2 -2c', 'Bma2', '39:ba-c'], transformations)
_space_group_table['C2v^15'] = sg
_space_group_table['B 2 -2c'] = sg
_space_group_table['Bma2'] = sg
_space_group_table['39:ba-c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^15', 'B -2c 2', 'B2cm', '39:cab'], transformations)
_space_group_table['C2v^15'] = sg
_space_group_table['B -2c 2'] = sg
_space_group_table['B2cm'] = sg
_space_group_table['39:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^15', 'C -2b 2', 'C2mb', '39:-cba'], transformations)
_space_group_table['C2v^15'] = sg
_space_group_table['C -2b 2'] = sg
_space_group_table['C2mb'] = sg
_space_group_table['39:-cba'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^15', 'C -2b -2b', 'Cm2a', '39:bca'], transformations)
_space_group_table['C2v^15'] = sg
_space_group_table['C -2b -2b'] = sg
_space_group_table['Cm2a'] = sg
_space_group_table['39:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^15', 'A -2c -2c', 'Ac2m', '39:a-cb'], transformations)
_space_group_table['C2v^15'] = sg
_space_group_table['A -2c -2c'] = sg
_space_group_table['Ac2m'] = sg
_space_group_table['39:a-cb'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^16', '40', 'A 2 -2a', 'Ama2'], transformations)
_space_group_table['C2v^16'] = sg
_space_group_table['40'] = sg
_space_group_table['A 2 -2a'] = sg
_space_group_table['Ama2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^16', 'B 2 -2b', 'Bbm2', '40:ba-c'], transformations)
_space_group_table['C2v^16'] = sg
_space_group_table['B 2 -2b'] = sg
_space_group_table['Bbm2'] = sg
_space_group_table['40:ba-c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^16', 'B -2b 2', 'B2mb', '40:cab'], transformations)
_space_group_table['C2v^16'] = sg
_space_group_table['B -2b 2'] = sg
_space_group_table['B2mb'] = sg
_space_group_table['40:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^16', 'C -2c 2', 'C2cm', '40:-cba'], transformations)
_space_group_table['C2v^16'] = sg
_space_group_table['C -2c 2'] = sg
_space_group_table['C2cm'] = sg
_space_group_table['40:-cba'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^16', 'C -2c -2c', 'Cc2m', '40:bca'], transformations)
_space_group_table['C2v^16'] = sg
_space_group_table['C -2c -2c'] = sg
_space_group_table['Cc2m'] = sg
_space_group_table['40:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^16', 'A -2a -2a', 'Am2a', '40:a-cb'], transformations)
_space_group_table['C2v^16'] = sg
_space_group_table['A -2a -2a'] = sg
_space_group_table['Am2a'] = sg
_space_group_table['40:a-cb'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^17', '41', 'A 2 -2ac', 'Aba2'], transformations)
_space_group_table['C2v^17'] = sg
_space_group_table['41'] = sg
_space_group_table['A 2 -2ac'] = sg
_space_group_table['Aba2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^17', 'B 2 -2bc', 'Bba2', '41:ba-c'], transformations)
_space_group_table['C2v^17'] = sg
_space_group_table['B 2 -2bc'] = sg
_space_group_table['Bba2'] = sg
_space_group_table['41:ba-c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^17', 'B -2bc 2', 'B2cb', '41:cab'], transformations)
_space_group_table['C2v^17'] = sg
_space_group_table['B -2bc 2'] = sg
_space_group_table['B2cb'] = sg
_space_group_table['41:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^17', 'C -2bc 2', 'C2cb', '41:-cba'], transformations)
_space_group_table['C2v^17'] = sg
_space_group_table['C -2bc 2'] = sg
_space_group_table['C2cb'] = sg
_space_group_table['41:-cba'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^17', 'C -2bc -2bc', 'Cc2a', '41:bca'], transformations)
_space_group_table['C2v^17'] = sg
_space_group_table['C -2bc -2bc'] = sg
_space_group_table['Cc2a'] = sg
_space_group_table['41:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^17', 'A -2ac -2ac', 'Ac2a', '41:a-cb'], transformations)
_space_group_table['C2v^17'] = sg
_space_group_table['A -2ac -2ac'] = sg
_space_group_table['Ac2a'] = sg
_space_group_table['41:a-cb'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^18', '42', 'F 2 -2', 'Fmm2'], transformations)
_space_group_table['C2v^18'] = sg
_space_group_table['42'] = sg
_space_group_table['F 2 -2'] = sg
_space_group_table['Fmm2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^18', 'F -2 2', 'F2mm', '42:cab'], transformations)
_space_group_table['C2v^18'] = sg
_space_group_table['F -2 2'] = sg
_space_group_table['F2mm'] = sg
_space_group_table['42:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^18', 'F -2 -2', 'Fm2m', '42:bca'], transformations)
_space_group_table['C2v^18'] = sg
_space_group_table['F -2 -2'] = sg
_space_group_table['Fm2m'] = sg
_space_group_table['42:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^19', '43', 'F 2 -2d', 'Fdd2'], transformations)
_space_group_table['C2v^19'] = sg
_space_group_table['43'] = sg
_space_group_table['F 2 -2d'] = sg
_space_group_table['Fdd2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^19', 'F -2d 2', 'F2dd', '43:cab'], transformations)
_space_group_table['C2v^19'] = sg
_space_group_table['F -2d 2'] = sg
_space_group_table['F2dd'] = sg
_space_group_table['43:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^19', 'F -2d -2d', 'Fd2d', '43:bca'], transformations)
_space_group_table['C2v^19'] = sg
_space_group_table['F -2d -2d'] = sg
_space_group_table['Fd2d'] = sg
_space_group_table['43:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^20', '44', 'I 2 -2', 'Imm2'], transformations)
_space_group_table['C2v^20'] = sg
_space_group_table['44'] = sg
_space_group_table['I 2 -2'] = sg
_space_group_table['Imm2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^20', 'I -2 2', 'I2mm', '44:cab'], transformations)
_space_group_table['C2v^20'] = sg
_space_group_table['I -2 2'] = sg
_space_group_table['I2mm'] = sg
_space_group_table['44:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^20', 'I -2 -2', 'Im2m', '44:bca'], transformations)
_space_group_table['C2v^20'] = sg
_space_group_table['I -2 -2'] = sg
_space_group_table['Im2m'] = sg
_space_group_table['44:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^21', '45', 'I 2 -2c', 'Iba2'], transformations)
_space_group_table['C2v^21'] = sg
_space_group_table['45'] = sg
_space_group_table['I 2 -2c'] = sg
_space_group_table['Iba2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^21', 'I -2a 2', 'I2cb', '45:cab'], transformations)
_space_group_table['C2v^21'] = sg
_space_group_table['I -2a 2'] = sg
_space_group_table['I2cb'] = sg
_space_group_table['45:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^21', 'I -2b -2b', 'Ic2a', '45:bca'], transformations)
_space_group_table['C2v^21'] = sg
_space_group_table['I -2b -2b'] = sg
_space_group_table['Ic2a'] = sg
_space_group_table['45:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^22', '46', 'I 2 -2a', 'Ima2'], transformations)
_space_group_table['C2v^22'] = sg
_space_group_table['46'] = sg
_space_group_table['I 2 -2a'] = sg
_space_group_table['Ima2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^22', 'I 2 -2b', 'Ibm2', '46:ba-c'], transformations)
_space_group_table['C2v^22'] = sg
_space_group_table['I 2 -2b'] = sg
_space_group_table['Ibm2'] = sg
_space_group_table['46:ba-c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^22', 'I -2b 2', 'I2mb', '46:cab'], transformations)
_space_group_table['C2v^22'] = sg
_space_group_table['I -2b 2'] = sg
_space_group_table['I2mb'] = sg
_space_group_table['46:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^22', 'I -2c 2', 'I2cm', '46:-cba'], transformations)
_space_group_table['C2v^22'] = sg
_space_group_table['I -2c 2'] = sg
_space_group_table['I2cm'] = sg
_space_group_table['46:-cba'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^22', 'I -2c -2c', 'Ic2m', '46:bca'], transformations)
_space_group_table['C2v^22'] = sg
_space_group_table['I -2c -2c'] = sg
_space_group_table['Ic2m'] = sg
_space_group_table['46:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C2v^22', 'I -2a -2a', 'Im2a', '46:a-cb'], transformations)
_space_group_table['C2v^22'] = sg
_space_group_table['I -2a -2a'] = sg
_space_group_table['Im2a'] = sg
_space_group_table['46:a-cb'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^1', '47', '-P 2 2', 'Pmmm'], transformations)
_space_group_table['D2h^1'] = sg
_space_group_table['47'] = sg
_space_group_table['-P 2 2'] = sg
_space_group_table['Pmmm'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^2', 'P 2 2 -1n', 'Pnnn:1', '48:1'], transformations)
_space_group_table['D2h^2'] = sg
_space_group_table['P 2 2 -1n'] = sg
_space_group_table['Pnnn:1'] = sg
_space_group_table['48:1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^2', '-P 2ab 2bc', 'Pnnn:2', '48:2'], transformations)
_space_group_table['D2h^2'] = sg
_space_group_table['-P 2ab 2bc'] = sg
_space_group_table['Pnnn:2'] = sg
_space_group_table['48:2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^3', '49', '-P 2 2c', 'Pccm'], transformations)
_space_group_table['D2h^3'] = sg
_space_group_table['49'] = sg
_space_group_table['-P 2 2c'] = sg
_space_group_table['Pccm'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^3', '-P 2a 2', 'Pmaa', '49:cab'], transformations)
_space_group_table['D2h^3'] = sg
_space_group_table['-P 2a 2'] = sg
_space_group_table['Pmaa'] = sg
_space_group_table['49:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^3', '-P 2b 2b', 'Pbmb', '49:bca'], transformations)
_space_group_table['D2h^3'] = sg
_space_group_table['-P 2b 2b'] = sg
_space_group_table['Pbmb'] = sg
_space_group_table['49:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^4', 'P 2 2 -1ab', 'Pban:1', '50:1'], transformations)
_space_group_table['D2h^4'] = sg
_space_group_table['P 2 2 -1ab'] = sg
_space_group_table['Pban:1'] = sg
_space_group_table['50:1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^4', '-P 2ab 2b', 'Pban:2', '50:2'], transformations)
_space_group_table['D2h^4'] = sg
_space_group_table['-P 2ab 2b'] = sg
_space_group_table['Pban:2'] = sg
_space_group_table['50:2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^4', 'P 2 2 -1bc', 'Pncb:1', '50:1cab'], transformations)
_space_group_table['D2h^4'] = sg
_space_group_table['P 2 2 -1bc'] = sg
_space_group_table['Pncb:1'] = sg
_space_group_table['50:1cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^4', '-P 2b 2bc', 'Pncb:2', '50:2cab'], transformations)
_space_group_table['D2h^4'] = sg
_space_group_table['-P 2b 2bc'] = sg
_space_group_table['Pncb:2'] = sg
_space_group_table['50:2cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^4', 'P 2 2 -1ac', 'Pcna:1', '50:1bca'], transformations)
_space_group_table['D2h^4'] = sg
_space_group_table['P 2 2 -1ac'] = sg
_space_group_table['Pcna:1'] = sg
_space_group_table['50:1bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^4', '-P 2a 2c', 'Pcna:2', '50:2bca'], transformations)
_space_group_table['D2h^4'] = sg
_space_group_table['-P 2a 2c'] = sg
_space_group_table['Pcna:2'] = sg
_space_group_table['50:2bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^5', '51', '-P 2a 2a', 'Pmma'], transformations)
_space_group_table['D2h^5'] = sg
_space_group_table['51'] = sg
_space_group_table['-P 2a 2a'] = sg
_space_group_table['Pmma'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^5', '-P 2b 2', 'Pmmb', '51:ba-c'], transformations)
_space_group_table['D2h^5'] = sg
_space_group_table['-P 2b 2'] = sg
_space_group_table['Pmmb'] = sg
_space_group_table['51:ba-c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^5', '-P 2 2b', 'Pbmm', '51:cab'], transformations)
_space_group_table['D2h^5'] = sg
_space_group_table['-P 2 2b'] = sg
_space_group_table['Pbmm'] = sg
_space_group_table['51:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^5', '-P 2c 2c', 'Pcmm', '51:-cba'], transformations)
_space_group_table['D2h^5'] = sg
_space_group_table['-P 2c 2c'] = sg
_space_group_table['Pcmm'] = sg
_space_group_table['51:-cba'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^5', '-P 2c 2', 'Pmcm', '51:bca'], transformations)
_space_group_table['D2h^5'] = sg
_space_group_table['-P 2c 2'] = sg
_space_group_table['Pmcm'] = sg
_space_group_table['51:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^5', '-P 2 2a', 'Pmam', '51:a-cb'], transformations)
_space_group_table['D2h^5'] = sg
_space_group_table['-P 2 2a'] = sg
_space_group_table['Pmam'] = sg
_space_group_table['51:a-cb'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^6', '52', '-P 2a 2bc', 'Pnna'], transformations)
_space_group_table['D2h^6'] = sg
_space_group_table['52'] = sg
_space_group_table['-P 2a 2bc'] = sg
_space_group_table['Pnna'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^6', '-P 2b 2n', 'Pnnb', '52:ba-c'], transformations)
_space_group_table['D2h^6'] = sg
_space_group_table['-P 2b 2n'] = sg
_space_group_table['Pnnb'] = sg
_space_group_table['52:ba-c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^6', '-P 2n 2b', 'Pbnn', '52:cab'], transformations)
_space_group_table['D2h^6'] = sg
_space_group_table['-P 2n 2b'] = sg
_space_group_table['Pbnn'] = sg
_space_group_table['52:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^6', '-P 2ab 2c', 'Pcnn', '52:-cba'], transformations)
_space_group_table['D2h^6'] = sg
_space_group_table['-P 2ab 2c'] = sg
_space_group_table['Pcnn'] = sg
_space_group_table['52:-cba'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^6', '-P 2ab 2n', 'Pncn', '52:bca'], transformations)
_space_group_table['D2h^6'] = sg
_space_group_table['-P 2ab 2n'] = sg
_space_group_table['Pncn'] = sg
_space_group_table['52:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^6', '-P 2n 2bc', 'Pnan', '52:a-cb'], transformations)
_space_group_table['D2h^6'] = sg
_space_group_table['-P 2n 2bc'] = sg
_space_group_table['Pnan'] = sg
_space_group_table['52:a-cb'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^7', '53', '-P 2ac 2', 'Pmna'], transformations)
_space_group_table['D2h^7'] = sg
_space_group_table['53'] = sg
_space_group_table['-P 2ac 2'] = sg
_space_group_table['Pmna'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^7', '-P 2bc 2bc', 'Pnmb', '53:ba-c'], transformations)
_space_group_table['D2h^7'] = sg
_space_group_table['-P 2bc 2bc'] = sg
_space_group_table['Pnmb'] = sg
_space_group_table['53:ba-c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^7', '-P 2ab 2ab', 'Pbmn', '53:cab'], transformations)
_space_group_table['D2h^7'] = sg
_space_group_table['-P 2ab 2ab'] = sg
_space_group_table['Pbmn'] = sg
_space_group_table['53:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^7', '-P 2 2ac', 'Pcnm', '53:-cba'], transformations)
_space_group_table['D2h^7'] = sg
_space_group_table['-P 2 2ac'] = sg
_space_group_table['Pcnm'] = sg
_space_group_table['53:-cba'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^7', '-P 2 2bc', 'Pncm', '53:bca'], transformations)
_space_group_table['D2h^7'] = sg
_space_group_table['-P 2 2bc'] = sg
_space_group_table['Pncm'] = sg
_space_group_table['53:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^7', '-P 2ab 2', 'Pman', '53:a-cb'], transformations)
_space_group_table['D2h^7'] = sg
_space_group_table['-P 2ab 2'] = sg
_space_group_table['Pman'] = sg
_space_group_table['53:a-cb'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^8', '54', '-P 2a 2ac', 'Pcca'], transformations)
_space_group_table['D2h^8'] = sg
_space_group_table['54'] = sg
_space_group_table['-P 2a 2ac'] = sg
_space_group_table['Pcca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^8', '-P 2b 2c', 'Pccb', '54:ba-c'], transformations)
_space_group_table['D2h^8'] = sg
_space_group_table['-P 2b 2c'] = sg
_space_group_table['Pccb'] = sg
_space_group_table['54:ba-c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^8', '-P 2a 2b', 'Pbaa', '54:cab'], transformations)
_space_group_table['D2h^8'] = sg
_space_group_table['-P 2a 2b'] = sg
_space_group_table['Pbaa'] = sg
_space_group_table['54:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^8', '-P 2ac 2c', 'Pcaa', '54:-cba'], transformations)
_space_group_table['D2h^8'] = sg
_space_group_table['-P 2ac 2c'] = sg
_space_group_table['Pcaa'] = sg
_space_group_table['54:-cba'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^8', '-P 2bc 2b', 'Pbcb', '54:bca'], transformations)
_space_group_table['D2h^8'] = sg
_space_group_table['-P 2bc 2b'] = sg
_space_group_table['Pbcb'] = sg
_space_group_table['54:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^8', '-P 2b 2ab', 'Pbab', '54:a-cb'], transformations)
_space_group_table['D2h^8'] = sg
_space_group_table['-P 2b 2ab'] = sg
_space_group_table['Pbab'] = sg
_space_group_table['54:a-cb'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^9', '55', '-P 2 2ab', 'Pbam'], transformations)
_space_group_table['D2h^9'] = sg
_space_group_table['55'] = sg
_space_group_table['-P 2 2ab'] = sg
_space_group_table['Pbam'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^9', '-P 2bc 2', 'Pmcb', '55:cab'], transformations)
_space_group_table['D2h^9'] = sg
_space_group_table['-P 2bc 2'] = sg
_space_group_table['Pmcb'] = sg
_space_group_table['55:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^9', '-P 2ac 2ac', 'Pcma', '55:bca'], transformations)
_space_group_table['D2h^9'] = sg
_space_group_table['-P 2ac 2ac'] = sg
_space_group_table['Pcma'] = sg
_space_group_table['55:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^10', '56', '-P 2ab 2ac', 'Pccn'], transformations)
_space_group_table['D2h^10'] = sg
_space_group_table['56'] = sg
_space_group_table['-P 2ab 2ac'] = sg
_space_group_table['Pccn'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^10', '-P 2ac 2bc', 'Pnaa', '56:cab'], transformations)
_space_group_table['D2h^10'] = sg
_space_group_table['-P 2ac 2bc'] = sg
_space_group_table['Pnaa'] = sg
_space_group_table['56:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^10', '-P 2bc 2ab', 'Pbnb', '56:bca'], transformations)
_space_group_table['D2h^10'] = sg
_space_group_table['-P 2bc 2ab'] = sg
_space_group_table['Pbnb'] = sg
_space_group_table['56:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^11', '57', '-P 2c 2b', 'Pbcm'], transformations)
_space_group_table['D2h^11'] = sg
_space_group_table['57'] = sg
_space_group_table['-P 2c 2b'] = sg
_space_group_table['Pbcm'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^11', '-P 2c 2ac', 'Pcam', '57:ba-c'], transformations)
_space_group_table['D2h^11'] = sg
_space_group_table['-P 2c 2ac'] = sg
_space_group_table['Pcam'] = sg
_space_group_table['57:ba-c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^11', '-P 2ac 2a', 'Pmca', '57:cab'], transformations)
_space_group_table['D2h^11'] = sg
_space_group_table['-P 2ac 2a'] = sg
_space_group_table['Pmca'] = sg
_space_group_table['57:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^11', '-P 2b 2a', 'Pmab', '57:-cba'], transformations)
_space_group_table['D2h^11'] = sg
_space_group_table['-P 2b 2a'] = sg
_space_group_table['Pmab'] = sg
_space_group_table['57:-cba'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^11', '-P 2a 2ab', 'Pbma', '57:bca'], transformations)
_space_group_table['D2h^11'] = sg
_space_group_table['-P 2a 2ab'] = sg
_space_group_table['Pbma'] = sg
_space_group_table['57:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^11', '-P 2bc 2c', 'Pcmb', '57:a-cb'], transformations)
_space_group_table['D2h^11'] = sg
_space_group_table['-P 2bc 2c'] = sg
_space_group_table['Pcmb'] = sg
_space_group_table['57:a-cb'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^12', '58', '-P 2 2n', 'Pnnm'], transformations)
_space_group_table['D2h^12'] = sg
_space_group_table['58'] = sg
_space_group_table['-P 2 2n'] = sg
_space_group_table['Pnnm'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^12', '-P 2n 2', 'Pmnn', '58:cab'], transformations)
_space_group_table['D2h^12'] = sg
_space_group_table['-P 2n 2'] = sg
_space_group_table['Pmnn'] = sg
_space_group_table['58:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^12', '-P 2n 2n', 'Pnmn', '58:bca'], transformations)
_space_group_table['D2h^12'] = sg
_space_group_table['-P 2n 2n'] = sg
_space_group_table['Pnmn'] = sg
_space_group_table['58:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^13', 'P 2 2ab -1ab', 'Pmmn:1', '59:1'], transformations)
_space_group_table['D2h^13'] = sg
_space_group_table['P 2 2ab -1ab'] = sg
_space_group_table['Pmmn:1'] = sg
_space_group_table['59:1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^13', '-P 2ab 2a', 'Pmmn:2', '59:2'], transformations)
_space_group_table['D2h^13'] = sg
_space_group_table['-P 2ab 2a'] = sg
_space_group_table['Pmmn:2'] = sg
_space_group_table['59:2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^13', 'P 2bc 2 -1bc', 'Pnmm:1', '59:1cab'], transformations)
_space_group_table['D2h^13'] = sg
_space_group_table['P 2bc 2 -1bc'] = sg
_space_group_table['Pnmm:1'] = sg
_space_group_table['59:1cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^13', '-P 2c 2bc', 'Pnmm:2', '59:2cab'], transformations)
_space_group_table['D2h^13'] = sg
_space_group_table['-P 2c 2bc'] = sg
_space_group_table['Pnmm:2'] = sg
_space_group_table['59:2cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^13', 'P 2ac 2ac -1ac', 'Pmnm:1', '59:1bca'], transformations)
_space_group_table['D2h^13'] = sg
_space_group_table['P 2ac 2ac -1ac'] = sg
_space_group_table['Pmnm:1'] = sg
_space_group_table['59:1bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^13', '-P 2c 2a', 'Pmnm:2', '59:2bca'], transformations)
_space_group_table['D2h^13'] = sg
_space_group_table['-P 2c 2a'] = sg
_space_group_table['Pmnm:2'] = sg
_space_group_table['59:2bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^14', '60', '-P 2n 2ab', 'Pbcn'], transformations)
_space_group_table['D2h^14'] = sg
_space_group_table['60'] = sg
_space_group_table['-P 2n 2ab'] = sg
_space_group_table['Pbcn'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^14', '-P 2n 2c', 'Pcan', '60:ba-c'], transformations)
_space_group_table['D2h^14'] = sg
_space_group_table['-P 2n 2c'] = sg
_space_group_table['Pcan'] = sg
_space_group_table['60:ba-c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^14', '-P 2a 2n', 'Pnca', '60:cab'], transformations)
_space_group_table['D2h^14'] = sg
_space_group_table['-P 2a 2n'] = sg
_space_group_table['Pnca'] = sg
_space_group_table['60:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^14', '-P 2bc 2n', 'Pnab', '60:-cba'], transformations)
_space_group_table['D2h^14'] = sg
_space_group_table['-P 2bc 2n'] = sg
_space_group_table['Pnab'] = sg
_space_group_table['60:-cba'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^14', '-P 2ac 2b', 'Pbna', '60:bca'], transformations)
_space_group_table['D2h^14'] = sg
_space_group_table['-P 2ac 2b'] = sg
_space_group_table['Pbna'] = sg
_space_group_table['60:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^14', '-P 2b 2ac', 'Pcnb', '60:a-cb'], transformations)
_space_group_table['D2h^14'] = sg
_space_group_table['-P 2b 2ac'] = sg
_space_group_table['Pcnb'] = sg
_space_group_table['60:a-cb'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^15', '61', '-P 2ac 2ab', 'Pbca'], transformations)
_space_group_table['D2h^15'] = sg
_space_group_table['61'] = sg
_space_group_table['-P 2ac 2ab'] = sg
_space_group_table['Pbca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^15', '-P 2bc 2ac', 'Pcab', '61:ba-c'], transformations)
_space_group_table['D2h^15'] = sg
_space_group_table['-P 2bc 2ac'] = sg
_space_group_table['Pcab'] = sg
_space_group_table['61:ba-c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^16', '62', '-P 2ac 2n', 'Pnma'], transformations)
_space_group_table['D2h^16'] = sg
_space_group_table['62'] = sg
_space_group_table['-P 2ac 2n'] = sg
_space_group_table['Pnma'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^16', '-P 2bc 2a', 'Pmnb', '62:ba-c'], transformations)
_space_group_table['D2h^16'] = sg
_space_group_table['-P 2bc 2a'] = sg
_space_group_table['Pmnb'] = sg
_space_group_table['62:ba-c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^16', '-P 2c 2ab', 'Pbnm', '62:cab'], transformations)
_space_group_table['D2h^16'] = sg
_space_group_table['-P 2c 2ab'] = sg
_space_group_table['Pbnm'] = sg
_space_group_table['62:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^16', '-P 2n 2ac', 'Pcmn', '62:-cba'], transformations)
_space_group_table['D2h^16'] = sg
_space_group_table['-P 2n 2ac'] = sg
_space_group_table['Pcmn'] = sg
_space_group_table['62:-cba'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^16', '-P 2n 2a', 'Pmcn', '62:bca'], transformations)
_space_group_table['D2h^16'] = sg
_space_group_table['-P 2n 2a'] = sg
_space_group_table['Pmcn'] = sg
_space_group_table['62:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^16', '-P 2c 2n', 'Pnam', '62:a-cb'], transformations)
_space_group_table['D2h^16'] = sg
_space_group_table['-P 2c 2n'] = sg
_space_group_table['Pnam'] = sg
_space_group_table['62:a-cb'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^17', '63', '-C 2c 2', 'Cmcm'], transformations)
_space_group_table['D2h^17'] = sg
_space_group_table['63'] = sg
_space_group_table['-C 2c 2'] = sg
_space_group_table['Cmcm'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^17', '-C 2c 2c', 'Ccmm', '63:ba-c'], transformations)
_space_group_table['D2h^17'] = sg
_space_group_table['-C 2c 2c'] = sg
_space_group_table['Ccmm'] = sg
_space_group_table['63:ba-c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^17', '-A 2a 2a', 'Amma', '63:cab'], transformations)
_space_group_table['D2h^17'] = sg
_space_group_table['-A 2a 2a'] = sg
_space_group_table['Amma'] = sg
_space_group_table['63:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^17', '-A 2 2a', 'Amam', '63:-cba'], transformations)
_space_group_table['D2h^17'] = sg
_space_group_table['-A 2 2a'] = sg
_space_group_table['Amam'] = sg
_space_group_table['63:-cba'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^17', '-B 2 2b', 'Bbmm', '63:bca'], transformations)
_space_group_table['D2h^17'] = sg
_space_group_table['-B 2 2b'] = sg
_space_group_table['Bbmm'] = sg
_space_group_table['63:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^17', '-B 2b 2', 'Bmmb', '63:a-cb'], transformations)
_space_group_table['D2h^17'] = sg
_space_group_table['-B 2b 2'] = sg
_space_group_table['Bmmb'] = sg
_space_group_table['63:a-cb'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^18', '64', '-C 2bc 2', 'Cmca'], transformations)
_space_group_table['D2h^18'] = sg
_space_group_table['64'] = sg
_space_group_table['-C 2bc 2'] = sg
_space_group_table['Cmca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^18', '-C 2bc 2bc', 'Ccmb', '64:ba-c'], transformations)
_space_group_table['D2h^18'] = sg
_space_group_table['-C 2bc 2bc'] = sg
_space_group_table['Ccmb'] = sg
_space_group_table['64:ba-c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^18', '-A 2ac 2ac', 'Abma', '64:cab'], transformations)
_space_group_table['D2h^18'] = sg
_space_group_table['-A 2ac 2ac'] = sg
_space_group_table['Abma'] = sg
_space_group_table['64:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^18', '-A 2 2ac', 'Acam', '64:-cba'], transformations)
_space_group_table['D2h^18'] = sg
_space_group_table['-A 2 2ac'] = sg
_space_group_table['Acam'] = sg
_space_group_table['64:-cba'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^18', '-B 2 2bc', 'Bbcm', '64:bca'], transformations)
_space_group_table['D2h^18'] = sg
_space_group_table['-B 2 2bc'] = sg
_space_group_table['Bbcm'] = sg
_space_group_table['64:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^18', '-B 2bc 2', 'Bmab', '64:a-cb'], transformations)
_space_group_table['D2h^18'] = sg
_space_group_table['-B 2bc 2'] = sg
_space_group_table['Bmab'] = sg
_space_group_table['64:a-cb'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^19', '65', '-C 2 2', 'Cmmm'], transformations)
_space_group_table['D2h^19'] = sg
_space_group_table['65'] = sg
_space_group_table['-C 2 2'] = sg
_space_group_table['Cmmm'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^19', '-A 2 2', 'Ammm', '65:cab'], transformations)
_space_group_table['D2h^19'] = sg
_space_group_table['-A 2 2'] = sg
_space_group_table['Ammm'] = sg
_space_group_table['65:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^19', '-B 2 2', 'Bmmm', '65:bca'], transformations)
_space_group_table['D2h^19'] = sg
_space_group_table['-B 2 2'] = sg
_space_group_table['Bmmm'] = sg
_space_group_table['65:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^20', '66', '-C 2 2c', 'Cccm'], transformations)
_space_group_table['D2h^20'] = sg
_space_group_table['66'] = sg
_space_group_table['-C 2 2c'] = sg
_space_group_table['Cccm'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^20', '-A 2a 2', 'Amaa', '66:cab'], transformations)
_space_group_table['D2h^20'] = sg
_space_group_table['-A 2a 2'] = sg
_space_group_table['Amaa'] = sg
_space_group_table['66:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^20', '-B 2b 2b', 'Bbmb', '66:bca'], transformations)
_space_group_table['D2h^20'] = sg
_space_group_table['-B 2b 2b'] = sg
_space_group_table['Bbmb'] = sg
_space_group_table['66:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^21', '67', '-C 2b 2', 'Cmma'], transformations)
_space_group_table['D2h^21'] = sg
_space_group_table['67'] = sg
_space_group_table['-C 2b 2'] = sg
_space_group_table['Cmma'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^21', '-C 2b 2b', 'Cmmb', '67:ba-c'], transformations)
_space_group_table['D2h^21'] = sg
_space_group_table['-C 2b 2b'] = sg
_space_group_table['Cmmb'] = sg
_space_group_table['67:ba-c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^21', '-A 2c 2c', 'Abmm', '67:cab'], transformations)
_space_group_table['D2h^21'] = sg
_space_group_table['-A 2c 2c'] = sg
_space_group_table['Abmm'] = sg
_space_group_table['67:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^21', '-A 2 2c', 'Acmm', '67:-cba'], transformations)
_space_group_table['D2h^21'] = sg
_space_group_table['-A 2 2c'] = sg
_space_group_table['Acmm'] = sg
_space_group_table['67:-cba'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^21', '-B 2 2c', 'Bmcm', '67:bca'], transformations)
_space_group_table['D2h^21'] = sg
_space_group_table['-B 2 2c'] = sg
_space_group_table['Bmcm'] = sg
_space_group_table['67:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^21', '-B 2c 2', 'Bmam', '67:a-cb'], transformations)
_space_group_table['D2h^21'] = sg
_space_group_table['-B 2c 2'] = sg
_space_group_table['Bmam'] = sg
_space_group_table['67:a-cb'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^22', 'C 2 2 -1bc', 'Ccca:1', '68:1'], transformations)
_space_group_table['D2h^22'] = sg
_space_group_table['C 2 2 -1bc'] = sg
_space_group_table['Ccca:1'] = sg
_space_group_table['68:1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^22', '-C 2b 2bc', 'Ccca:2', '68:2'], transformations)
_space_group_table['D2h^22'] = sg
_space_group_table['-C 2b 2bc'] = sg
_space_group_table['Ccca:2'] = sg
_space_group_table['68:2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^22', 'C 2 2 -1bc', 'Cccb:1', '68:1ba-c'], transformations)
_space_group_table['D2h^22'] = sg
_space_group_table['C 2 2 -1bc'] = sg
_space_group_table['Cccb:1'] = sg
_space_group_table['68:1ba-c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^22', '-C 2b 2c', 'Cccb:2', '68:2ba-c'], transformations)
_space_group_table['D2h^22'] = sg
_space_group_table['-C 2b 2c'] = sg
_space_group_table['Cccb:2'] = sg
_space_group_table['68:2ba-c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^22', 'A 2 2 -1ac', 'Abaa:1', '68:1cab'], transformations)
_space_group_table['D2h^22'] = sg
_space_group_table['A 2 2 -1ac'] = sg
_space_group_table['Abaa:1'] = sg
_space_group_table['68:1cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^22', '-A 2a 2c', 'Abaa:2', '68:2cab'], transformations)
_space_group_table['D2h^22'] = sg
_space_group_table['-A 2a 2c'] = sg
_space_group_table['Abaa:2'] = sg
_space_group_table['68:2cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^22', 'A 2 2 -1ac', 'Acaa:1', '68:1-cba'], transformations)
_space_group_table['D2h^22'] = sg
_space_group_table['A 2 2 -1ac'] = sg
_space_group_table['Acaa:1'] = sg
_space_group_table['68:1-cba'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^22', '-A 2ac 2c', 'Acaa:2', '68:2-cba'], transformations)
_space_group_table['D2h^22'] = sg
_space_group_table['-A 2ac 2c'] = sg
_space_group_table['Acaa:2'] = sg
_space_group_table['68:2-cba'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^22', 'B 2 2 -1bc', 'Bbcb:1', '68:1bca'], transformations)
_space_group_table['D2h^22'] = sg
_space_group_table['B 2 2 -1bc'] = sg
_space_group_table['Bbcb:1'] = sg
_space_group_table['68:1bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^22', '-B 2bc 2b', 'Bbcb:2', '68:2bca'], transformations)
_space_group_table['D2h^22'] = sg
_space_group_table['-B 2bc 2b'] = sg
_space_group_table['Bbcb:2'] = sg
_space_group_table['68:2bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^22', 'B 2 2 -1bc', 'Bbab:1', '68:1a-cb'], transformations)
_space_group_table['D2h^22'] = sg
_space_group_table['B 2 2 -1bc'] = sg
_space_group_table['Bbab:1'] = sg
_space_group_table['68:1a-cb'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^22', '-B 2b 2bc', 'Bbab:2', '68:2a-cb'], transformations)
_space_group_table['D2h^22'] = sg
_space_group_table['-B 2b 2bc'] = sg
_space_group_table['Bbab:2'] = sg
_space_group_table['68:2a-cb'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^23', '69', '-F 2 2', 'Fmmm'], transformations)
_space_group_table['D2h^23'] = sg
_space_group_table['69'] = sg
_space_group_table['-F 2 2'] = sg
_space_group_table['Fmmm'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^24', 'F 2 2 -1d', 'Fddd:1', '70:1'], transformations)
_space_group_table['D2h^24'] = sg
_space_group_table['F 2 2 -1d'] = sg
_space_group_table['Fddd:1'] = sg
_space_group_table['70:1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^24', '-F 2uv 2vw', 'Fddd:2', '70:2'], transformations)
_space_group_table['D2h^24'] = sg
_space_group_table['-F 2uv 2vw'] = sg
_space_group_table['Fddd:2'] = sg
_space_group_table['70:2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^25', '71', '-I 2 2', 'Immm'], transformations)
_space_group_table['D2h^25'] = sg
_space_group_table['71'] = sg
_space_group_table['-I 2 2'] = sg
_space_group_table['Immm'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^26', '72', '-I 2 2c', 'Ibam'], transformations)
_space_group_table['D2h^26'] = sg
_space_group_table['72'] = sg
_space_group_table['-I 2 2c'] = sg
_space_group_table['Ibam'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^26', '-I 2a 2', 'Imcb', '72:cab'], transformations)
_space_group_table['D2h^26'] = sg
_space_group_table['-I 2a 2'] = sg
_space_group_table['Imcb'] = sg
_space_group_table['72:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^26', '-I 2b 2b', 'Icma', '72:bca'], transformations)
_space_group_table['D2h^26'] = sg
_space_group_table['-I 2b 2b'] = sg
_space_group_table['Icma'] = sg
_space_group_table['72:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^27', '73', '-I 2b 2c', 'Ibca'], transformations)
_space_group_table['D2h^27'] = sg
_space_group_table['73'] = sg
_space_group_table['-I 2b 2c'] = sg
_space_group_table['Ibca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^27', '-I 2a 2b', 'Icab', '73:ba-c'], transformations)
_space_group_table['D2h^27'] = sg
_space_group_table['-I 2a 2b'] = sg
_space_group_table['Icab'] = sg
_space_group_table['73:ba-c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^28', '74', '-I 2b 2', 'Imma'], transformations)
_space_group_table['D2h^28'] = sg
_space_group_table['74'] = sg
_space_group_table['-I 2b 2'] = sg
_space_group_table['Imma'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^28', '-I 2a 2a', 'Immb', '74:ba-c'], transformations)
_space_group_table['D2h^28'] = sg
_space_group_table['-I 2a 2a'] = sg
_space_group_table['Immb'] = sg
_space_group_table['74:ba-c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^28', '-I 2c 2c', 'Ibmm', '74:cab'], transformations)
_space_group_table['D2h^28'] = sg
_space_group_table['-I 2c 2c'] = sg
_space_group_table['Ibmm'] = sg
_space_group_table['74:cab'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^28', '-I 2 2b', 'Icmm', '74:-cba'], transformations)
_space_group_table['D2h^28'] = sg
_space_group_table['-I 2 2b'] = sg
_space_group_table['Icmm'] = sg
_space_group_table['74:-cba'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^28', '-I 2 2a', 'Imcm', '74:bca'], transformations)
_space_group_table['D2h^28'] = sg
_space_group_table['-I 2 2a'] = sg
_space_group_table['Imcm'] = sg
_space_group_table['74:bca'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2h^28', '-I 2c 2', 'Imam', '74:a-cb'], transformations)
_space_group_table['D2h^28'] = sg
_space_group_table['-I 2c 2'] = sg
_space_group_table['Imam'] = sg
_space_group_table['74:a-cb'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C4^1', '75', 'P 4', 'P4'], transformations)
_space_group_table['C4^1'] = sg
_space_group_table['75'] = sg
_space_group_table['P 4'] = sg
_space_group_table['P4'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C4^2', '76', 'P 4w', 'P41'], transformations)
_space_group_table['C4^2'] = sg
_space_group_table['76'] = sg
_space_group_table['P 4w'] = sg
_space_group_table['P41'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C4^3', '77', 'P 4c', 'P42'], transformations)
_space_group_table['C4^3'] = sg
_space_group_table['77'] = sg
_space_group_table['P 4c'] = sg
_space_group_table['P42'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C4^4', '78', 'P 4cw', 'P43'], transformations)
_space_group_table['C4^4'] = sg
_space_group_table['78'] = sg
_space_group_table['P 4cw'] = sg
_space_group_table['P43'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C4^5', '79', 'I 4', 'I4'], transformations)
_space_group_table['C4^5'] = sg
_space_group_table['79'] = sg
_space_group_table['I 4'] = sg
_space_group_table['I4'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C4^6', '80', 'I 4bw', 'I41'], transformations)
_space_group_table['C4^6'] = sg
_space_group_table['80'] = sg
_space_group_table['I 4bw'] = sg
_space_group_table['I41'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['S4^1', '81', 'P -4', 'P-4'], transformations)
_space_group_table['S4^1'] = sg
_space_group_table['81'] = sg
_space_group_table['P -4'] = sg
_space_group_table['P-4'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['S4^2', '82', 'I -4', 'I-4'], transformations)
_space_group_table['S4^2'] = sg
_space_group_table['82'] = sg
_space_group_table['I -4'] = sg
_space_group_table['I-4'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C4h^1', '83', '-P 4', 'P4/m'], transformations)
_space_group_table['C4h^1'] = sg
_space_group_table['83'] = sg
_space_group_table['-P 4'] = sg
_space_group_table['P4/m'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C4h^2', '84', '-P 4c', 'P42/m'], transformations)
_space_group_table['C4h^2'] = sg
_space_group_table['84'] = sg
_space_group_table['-P 4c'] = sg
_space_group_table['P42/m'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C4h^3', 'P 4ab -1ab', 'P4/n:1', '85:1'], transformations)
_space_group_table['C4h^3'] = sg
_space_group_table['P 4ab -1ab'] = sg
_space_group_table['P4/n:1'] = sg
_space_group_table['85:1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C4h^3', '-P 4a', 'P4/n:2', '85:2'], transformations)
_space_group_table['C4h^3'] = sg
_space_group_table['-P 4a'] = sg
_space_group_table['P4/n:2'] = sg
_space_group_table['85:2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C4h^4', 'P 4n -1n', 'P42/n:1', '86:1'], transformations)
_space_group_table['C4h^4'] = sg
_space_group_table['P 4n -1n'] = sg
_space_group_table['P42/n:1'] = sg
_space_group_table['86:1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C4h^4', '-P 4bc', 'P42/n:2', '86:2'], transformations)
_space_group_table['C4h^4'] = sg
_space_group_table['-P 4bc'] = sg
_space_group_table['P42/n:2'] = sg
_space_group_table['86:2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C4h^5', '87', '-I 4', 'I4/m'], transformations)
_space_group_table['C4h^5'] = sg
_space_group_table['87'] = sg
_space_group_table['-I 4'] = sg
_space_group_table['I4/m'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-3./4.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C4h^6', 'I 4bw -1bw', 'I41/a:1', '88:1'], transformations)
_space_group_table['C4h^6'] = sg
_space_group_table['I 4bw -1bw'] = sg
_space_group_table['I41/a:1'] = sg
_space_group_table['88:1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-3./4.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C4h^6', '-I 4ad', 'I41/a:2', '88:2'], transformations)
_space_group_table['C4h^6'] = sg
_space_group_table['-I 4ad'] = sg
_space_group_table['I41/a:2'] = sg
_space_group_table['88:2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4^1', '89', 'P 4 2', 'P422'], transformations)
_space_group_table['D4^1'] = sg
_space_group_table['89'] = sg
_space_group_table['P 4 2'] = sg
_space_group_table['P422'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4^2', '90', 'P 4ab 2ab', 'P4212'], transformations)
_space_group_table['D4^2'] = sg
_space_group_table['90'] = sg
_space_group_table['P 4ab 2ab'] = sg
_space_group_table['P4212'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4^3', '91', 'P 4w 2c', 'P4122'], transformations)
_space_group_table['D4^3'] = sg
_space_group_table['91'] = sg
_space_group_table['P 4w 2c'] = sg
_space_group_table['P4122'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4^4', '92', 'P 4abw 2nw', 'P41212'], transformations)
_space_group_table['D4^4'] = sg
_space_group_table['92'] = sg
_space_group_table['P 4abw 2nw'] = sg
_space_group_table['P41212'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4^5', '93', 'P 4c 2', 'P4222'], transformations)
_space_group_table['D4^5'] = sg
_space_group_table['93'] = sg
_space_group_table['P 4c 2'] = sg
_space_group_table['P4222'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4^6', '94', 'P 4n 2n', 'P42212'], transformations)
_space_group_table['D4^6'] = sg
_space_group_table['94'] = sg
_space_group_table['P 4n 2n'] = sg
_space_group_table['P42212'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4^7', '95', 'P 4cw 2c', 'P4322'], transformations)
_space_group_table['D4^7'] = sg
_space_group_table['95'] = sg
_space_group_table['P 4cw 2c'] = sg
_space_group_table['P4322'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4^8', '96', 'P 4nw 2abw', 'P43212'], transformations)
_space_group_table['D4^8'] = sg
_space_group_table['96'] = sg
_space_group_table['P 4nw 2abw'] = sg
_space_group_table['P43212'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4^9', '97', 'I 4 2', 'I422'], transformations)
_space_group_table['D4^9'] = sg
_space_group_table['97'] = sg
_space_group_table['I 4 2'] = sg
_space_group_table['I422'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4^10', '98', 'I 4bw 2bw', 'I4122'], transformations)
_space_group_table['D4^10'] = sg
_space_group_table['98'] = sg
_space_group_table['I 4bw 2bw'] = sg
_space_group_table['I4122'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C4v^1', '99', 'P 4 -2', 'P4mm'], transformations)
_space_group_table['C4v^1'] = sg
_space_group_table['99'] = sg
_space_group_table['P 4 -2'] = sg
_space_group_table['P4mm'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C4v^2', '100', 'P 4 -2ab', 'P4bm'], transformations)
_space_group_table['C4v^2'] = sg
_space_group_table['100'] = sg
_space_group_table['P 4 -2ab'] = sg
_space_group_table['P4bm'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C4v^3', '101', 'P 4c -2c', 'P42cm'], transformations)
_space_group_table['C4v^3'] = sg
_space_group_table['101'] = sg
_space_group_table['P 4c -2c'] = sg
_space_group_table['P42cm'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C4v^4', '102', 'P 4n -2n', 'P42nm'], transformations)
_space_group_table['C4v^4'] = sg
_space_group_table['102'] = sg
_space_group_table['P 4n -2n'] = sg
_space_group_table['P42nm'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C4v^5', '103', 'P 4 -2c', 'P4cc'], transformations)
_space_group_table['C4v^5'] = sg
_space_group_table['103'] = sg
_space_group_table['P 4 -2c'] = sg
_space_group_table['P4cc'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C4v^6', '104', 'P 4 -2n', 'P4nc'], transformations)
_space_group_table['C4v^6'] = sg
_space_group_table['104'] = sg
_space_group_table['P 4 -2n'] = sg
_space_group_table['P4nc'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C4v^7', '105', 'P 4c -2', 'P42mc'], transformations)
_space_group_table['C4v^7'] = sg
_space_group_table['105'] = sg
_space_group_table['P 4c -2'] = sg
_space_group_table['P42mc'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C4v^8', '106', 'P 4c -2ab', 'P42bc'], transformations)
_space_group_table['C4v^8'] = sg
_space_group_table['106'] = sg
_space_group_table['P 4c -2ab'] = sg
_space_group_table['P42bc'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C4v^9', '107', 'I 4 -2', 'I4mm'], transformations)
_space_group_table['C4v^9'] = sg
_space_group_table['107'] = sg
_space_group_table['I 4 -2'] = sg
_space_group_table['I4mm'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C4v^10', '108', 'I 4 -2c', 'I4cm'], transformations)
_space_group_table['C4v^10'] = sg
_space_group_table['108'] = sg
_space_group_table['I 4 -2c'] = sg
_space_group_table['I4cm'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C4v^11', '109', 'I 4bw -2', 'I41md'], transformations)
_space_group_table['C4v^11'] = sg
_space_group_table['109'] = sg
_space_group_table['I 4bw -2'] = sg
_space_group_table['I41md'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C4v^12', '110', 'I 4bw -2c', 'I41cd'], transformations)
_space_group_table['C4v^12'] = sg
_space_group_table['110'] = sg
_space_group_table['I 4bw -2c'] = sg
_space_group_table['I41cd'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2d^1', '111', 'P -4 2', 'P-42m'], transformations)
_space_group_table['D2d^1'] = sg
_space_group_table['111'] = sg
_space_group_table['P -4 2'] = sg
_space_group_table['P-42m'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2d^2', '112', 'P -4 2c', 'P-42c'], transformations)
_space_group_table['D2d^2'] = sg
_space_group_table['112'] = sg
_space_group_table['P -4 2c'] = sg
_space_group_table['P-42c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2d^3', '113', 'P -4 2ab', 'P-421m'], transformations)
_space_group_table['D2d^3'] = sg
_space_group_table['113'] = sg
_space_group_table['P -4 2ab'] = sg
_space_group_table['P-421m'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2d^4', '114', 'P -4 2n', 'P-421c'], transformations)
_space_group_table['D2d^4'] = sg
_space_group_table['114'] = sg
_space_group_table['P -4 2n'] = sg
_space_group_table['P-421c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2d^5', '115', 'P -4 -2', 'P-4m2'], transformations)
_space_group_table['D2d^5'] = sg
_space_group_table['115'] = sg
_space_group_table['P -4 -2'] = sg
_space_group_table['P-4m2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2d^6', '116', 'P -4 -2c', 'P-4c2'], transformations)
_space_group_table['D2d^6'] = sg
_space_group_table['116'] = sg
_space_group_table['P -4 -2c'] = sg
_space_group_table['P-4c2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2d^7', '117', 'P -4 -2ab', 'P-4b2'], transformations)
_space_group_table['D2d^7'] = sg
_space_group_table['117'] = sg
_space_group_table['P -4 -2ab'] = sg
_space_group_table['P-4b2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2d^8', '118', 'P -4 -2n', 'P-4n2'], transformations)
_space_group_table['D2d^8'] = sg
_space_group_table['118'] = sg
_space_group_table['P -4 -2n'] = sg
_space_group_table['P-4n2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2d^9', '119', 'I -4 -2', 'I-4m2'], transformations)
_space_group_table['D2d^9'] = sg
_space_group_table['119'] = sg
_space_group_table['I -4 -2'] = sg
_space_group_table['I-4m2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2d^10', '120', 'I -4 -2c', 'I-4c2'], transformations)
_space_group_table['D2d^10'] = sg
_space_group_table['120'] = sg
_space_group_table['I -4 -2c'] = sg
_space_group_table['I-4c2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2d^11', '121', 'I -4 2', 'I-42m'], transformations)
_space_group_table['D2d^11'] = sg
_space_group_table['121'] = sg
_space_group_table['I -4 2'] = sg
_space_group_table['I-42m'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D2d^12', '122', 'I -4 2bw', 'I-42d'], transformations)
_space_group_table['D2d^12'] = sg
_space_group_table['122'] = sg
_space_group_table['I -4 2bw'] = sg
_space_group_table['I-42d'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^1', '123', '-P 4 2', 'P4/mmm'], transformations)
_space_group_table['D4h^1'] = sg
_space_group_table['123'] = sg
_space_group_table['-P 4 2'] = sg
_space_group_table['P4/mmm'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^2', '124', '-P 4 2c', 'P4/mcc'], transformations)
_space_group_table['D4h^2'] = sg
_space_group_table['124'] = sg
_space_group_table['-P 4 2c'] = sg
_space_group_table['P4/mcc'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^3', 'P 4 2 -1ab', 'P4/nbm:1', '125:1'], transformations)
_space_group_table['D4h^3'] = sg
_space_group_table['P 4 2 -1ab'] = sg
_space_group_table['P4/nbm:1'] = sg
_space_group_table['125:1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^3', '-P 4a 2b', 'P4/nbm:2', '125:2'], transformations)
_space_group_table['D4h^3'] = sg
_space_group_table['-P 4a 2b'] = sg
_space_group_table['P4/nbm:2'] = sg
_space_group_table['125:2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^4', 'P 4 2 -1n', 'P4/nnc:1', '126:1'], transformations)
_space_group_table['D4h^4'] = sg
_space_group_table['P 4 2 -1n'] = sg
_space_group_table['P4/nnc:1'] = sg
_space_group_table['126:1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^4', '-P 4a 2bc', 'P4/nnc:2', '126:2'], transformations)
_space_group_table['D4h^4'] = sg
_space_group_table['-P 4a 2bc'] = sg
_space_group_table['P4/nnc:2'] = sg
_space_group_table['126:2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^5', '127', '-P 4 2ab', 'P4/mbm'], transformations)
_space_group_table['D4h^5'] = sg
_space_group_table['127'] = sg
_space_group_table['-P 4 2ab'] = sg
_space_group_table['P4/mbm'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^6', '128', '-P 4 2n', 'P4/mnc'], transformations)
_space_group_table['D4h^6'] = sg
_space_group_table['128'] = sg
_space_group_table['-P 4 2n'] = sg
_space_group_table['P4/mnc'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^7', 'P 4ab 2ab -1ab', 'P4/nmm:1', '129:1'], transformations)
_space_group_table['D4h^7'] = sg
_space_group_table['P 4ab 2ab -1ab'] = sg
_space_group_table['P4/nmm:1'] = sg
_space_group_table['129:1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^7', '-P 4a 2a', 'P4/nmm:2', '129:2'], transformations)
_space_group_table['D4h^7'] = sg
_space_group_table['-P 4a 2a'] = sg
_space_group_table['P4/nmm:2'] = sg
_space_group_table['129:2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^8', 'P 4ab 2n -1ab', 'P4/ncc:1', '130:1'], transformations)
_space_group_table['D4h^8'] = sg
_space_group_table['P 4ab 2n -1ab'] = sg
_space_group_table['P4/ncc:1'] = sg
_space_group_table['130:1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^8', '-P 4a 2ac', 'P4/ncc:2', '130:2'], transformations)
_space_group_table['D4h^8'] = sg
_space_group_table['-P 4a 2ac'] = sg
_space_group_table['P4/ncc:2'] = sg
_space_group_table['130:2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^9', '131', '-P 4c 2', 'P42/mmc'], transformations)
_space_group_table['D4h^9'] = sg
_space_group_table['131'] = sg
_space_group_table['-P 4c 2'] = sg
_space_group_table['P42/mmc'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^10', '132', '-P 4c 2c', 'P42/mcm'], transformations)
_space_group_table['D4h^10'] = sg
_space_group_table['132'] = sg
_space_group_table['-P 4c 2c'] = sg
_space_group_table['P42/mcm'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^11', 'P 4n 2c -1n', 'P42/nbc:1', '133:1'], transformations)
_space_group_table['D4h^11'] = sg
_space_group_table['P 4n 2c -1n'] = sg
_space_group_table['P42/nbc:1'] = sg
_space_group_table['133:1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^11', '-P 4ac 2b', 'P42/nbc:2', '133:2'], transformations)
_space_group_table['D4h^11'] = sg
_space_group_table['-P 4ac 2b'] = sg
_space_group_table['P42/nbc:2'] = sg
_space_group_table['133:2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^12', 'P 4n 2 -1n', 'P42/nnm:1', '134:1'], transformations)
_space_group_table['D4h^12'] = sg
_space_group_table['P 4n 2 -1n'] = sg
_space_group_table['P42/nnm:1'] = sg
_space_group_table['134:1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^12', '-P 4ac 2bc', 'P42/nnm:2', '134:2'], transformations)
_space_group_table['D4h^12'] = sg
_space_group_table['-P 4ac 2bc'] = sg
_space_group_table['P42/nnm:2'] = sg
_space_group_table['134:2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^13', '135', '-P 4c 2ab', 'P42/mbc'], transformations)
_space_group_table['D4h^13'] = sg
_space_group_table['135'] = sg
_space_group_table['-P 4c 2ab'] = sg
_space_group_table['P42/mbc'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^14', '136', '-P 4n 2n', 'P42/mnm'], transformations)
_space_group_table['D4h^14'] = sg
_space_group_table['136'] = sg
_space_group_table['-P 4n 2n'] = sg
_space_group_table['P42/mnm'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^15', 'P 4n 2n -1n', 'P42/nmc:1', '137:1'], transformations)
_space_group_table['D4h^15'] = sg
_space_group_table['P 4n 2n -1n'] = sg
_space_group_table['P42/nmc:1'] = sg
_space_group_table['137:1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^15', '-P 4ac 2a', 'P42/nmc:2', '137:2'], transformations)
_space_group_table['D4h^15'] = sg
_space_group_table['-P 4ac 2a'] = sg
_space_group_table['P42/nmc:2'] = sg
_space_group_table['137:2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^16', 'P 4n 2ab -1n', 'P42/ncm:1', '138:1'], transformations)
_space_group_table['D4h^16'] = sg
_space_group_table['P 4n 2ab -1n'] = sg
_space_group_table['P42/ncm:1'] = sg
_space_group_table['138:1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^16', '-P 4ac 2ac', 'P42/ncm:2', '138:2'], transformations)
_space_group_table['D4h^16'] = sg
_space_group_table['-P 4ac 2ac'] = sg
_space_group_table['P42/ncm:2'] = sg
_space_group_table['138:2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^17', '139', '-I 4 2', 'I4/mmm'], transformations)
_space_group_table['D4h^17'] = sg
_space_group_table['139'] = sg
_space_group_table['-I 4 2'] = sg
_space_group_table['I4/mmm'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^18', '140', '-I 4 2c', 'I4/mcm'], transformations)
_space_group_table['D4h^18'] = sg
_space_group_table['140'] = sg
_space_group_table['-I 4 2c'] = sg
_space_group_table['I4/mcm'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-3./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-3./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^19', 'I 4bw 2bw -1bw', 'I41/amd:1', '141:1'], transformations)
_space_group_table['D4h^19'] = sg
_space_group_table['I 4bw 2bw -1bw'] = sg
_space_group_table['I41/amd:1'] = sg
_space_group_table['141:1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-3./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-3./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^19', '-I 4bd 2', 'I41/amd:2', '141:2'], transformations)
_space_group_table['D4h^19'] = sg
_space_group_table['-I 4bd 2'] = sg
_space_group_table['I41/amd:2'] = sg
_space_group_table['141:2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-3./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-3./4.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^20', 'I 4bw 2aw -1bw', 'I41/acd:1', '142:1'], transformations)
_space_group_table['D4h^20'] = sg
_space_group_table['I 4bw 2aw -1bw'] = sg
_space_group_table['I41/acd:1'] = sg
_space_group_table['142:1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-3./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-3./4.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D4h^20', '-I 4bd 2c', 'I41/acd:2', '142:2'], transformations)
_space_group_table['D4h^20'] = sg
_space_group_table['-I 4bd 2c'] = sg
_space_group_table['I41/acd:2'] = sg
_space_group_table['142:2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C3^1', '143', 'P 3', 'P3'], transformations)
_space_group_table['C3^1'] = sg
_space_group_table['143'] = sg
_space_group_table['P 3'] = sg
_space_group_table['P3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C3^2', '144', 'P 31', 'P31'], transformations)
_space_group_table['C3^2'] = sg
_space_group_table['144'] = sg
_space_group_table['P 31'] = sg
_space_group_table['P31'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C3^3', '145', 'P 32', 'P32'], transformations)
_space_group_table['C3^3'] = sg
_space_group_table['145'] = sg
_space_group_table['P 32'] = sg
_space_group_table['P32'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C3^4', 'R 3', 'R3:H', '146:H'], transformations)
_space_group_table['C3^4'] = sg
_space_group_table['R 3'] = sg
_space_group_table['R3:H'] = sg
_space_group_table['146:H'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C3^4', 'P 3*', 'R3:R', '146:R'], transformations)
_space_group_table['C3^4'] = sg
_space_group_table['P 3*'] = sg
_space_group_table['R3:R'] = sg
_space_group_table['146:R'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C3i^1', '147', '-P 3', 'P-3'], transformations)
_space_group_table['C3i^1'] = sg
_space_group_table['147'] = sg
_space_group_table['-P 3'] = sg
_space_group_table['P-3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C3i^2', '-R 3', 'R-3:H', '148:H'], transformations)
_space_group_table['C3i^2'] = sg
_space_group_table['-R 3'] = sg
_space_group_table['R-3:H'] = sg
_space_group_table['148:H'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C3i^2', '-P 3*', 'R-3:R', '148:R'], transformations)
_space_group_table['C3i^2'] = sg
_space_group_table['-P 3*'] = sg
_space_group_table['R-3:R'] = sg
_space_group_table['148:R'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D3^1', '149', 'P 3 2', 'P312'], transformations)
_space_group_table['D3^1'] = sg
_space_group_table['149'] = sg
_space_group_table['P 3 2'] = sg
_space_group_table['P312'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D3^2', '150', 'P 3 2"', 'P321'], transformations)
_space_group_table['D3^2'] = sg
_space_group_table['150'] = sg
_space_group_table['P 3 2"'] = sg
_space_group_table['P321'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D3^3', '151', 'P 31 2c (0 0 1)', 'P3112'], transformations)
_space_group_table['D3^3'] = sg
_space_group_table['151'] = sg
_space_group_table['P 31 2c (0 0 1)'] = sg
_space_group_table['P3112'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D3^4', '152', 'P 31 2"', 'P3121'], transformations)
_space_group_table['D3^4'] = sg
_space_group_table['152'] = sg
_space_group_table['P 31 2"'] = sg
_space_group_table['P3121'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D3^5', '153', 'P 32 2c (0 0 -1)', 'P3212'], transformations)
_space_group_table['D3^5'] = sg
_space_group_table['153'] = sg
_space_group_table['P 32 2c (0 0 -1)'] = sg
_space_group_table['P3212'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D3^6', '154', 'P 32 2"', 'P3221'], transformations)
_space_group_table['D3^6'] = sg
_space_group_table['154'] = sg
_space_group_table['P 32 2"'] = sg
_space_group_table['P3221'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D3^7', 'R 3 2"', 'R32:H', '155:H'], transformations)
_space_group_table['D3^7'] = sg
_space_group_table['R 3 2"'] = sg
_space_group_table['R32:H'] = sg
_space_group_table['155:H'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D3^7', 'P 3* 2', 'R32:R', '155:R'], transformations)
_space_group_table['D3^7'] = sg
_space_group_table['P 3* 2'] = sg
_space_group_table['R32:R'] = sg
_space_group_table['155:R'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C3v^1', '156', 'P 3 -2"', 'P3m1'], transformations)
_space_group_table['C3v^1'] = sg
_space_group_table['156'] = sg
_space_group_table['P 3 -2"'] = sg
_space_group_table['P3m1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C3v^2', '157', 'P 3 -2', 'P31m'], transformations)
_space_group_table['C3v^2'] = sg
_space_group_table['157'] = sg
_space_group_table['P 3 -2'] = sg
_space_group_table['P31m'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C3v^3', '158', 'P 3 -2"c', 'P3c1'], transformations)
_space_group_table['C3v^3'] = sg
_space_group_table['158'] = sg
_space_group_table['P 3 -2"c'] = sg
_space_group_table['P3c1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C3v^4', '159', 'P 3 -2c', 'P31c'], transformations)
_space_group_table['C3v^4'] = sg
_space_group_table['159'] = sg
_space_group_table['P 3 -2c'] = sg
_space_group_table['P31c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C3v^5', 'R 3 -2"', 'R3m:H', '160:H'], transformations)
_space_group_table['C3v^5'] = sg
_space_group_table['R 3 -2"'] = sg
_space_group_table['R3m:H'] = sg
_space_group_table['160:H'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C3v^5', 'P 3* -2', 'R3m:R', '160:R'], transformations)
_space_group_table['C3v^5'] = sg
_space_group_table['P 3* -2'] = sg
_space_group_table['R3m:R'] = sg
_space_group_table['160:R'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,7./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,7./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,7./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,5./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,5./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,5./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C3v^6', 'R 3 -2"c', 'R3c:H', '161:H'], transformations)
_space_group_table['C3v^6'] = sg
_space_group_table['R 3 -2"c'] = sg
_space_group_table['R3c:H'] = sg
_space_group_table['161:H'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,7./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,7./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,7./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,5./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,5./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,5./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C3v^6', 'P 3* -2n', 'R3c:R', '161:R'], transformations)
_space_group_table['C3v^6'] = sg
_space_group_table['P 3* -2n'] = sg
_space_group_table['R3c:R'] = sg
_space_group_table['161:R'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D3d^1', '162', '-P 3 2', 'P-31m'], transformations)
_space_group_table['D3d^1'] = sg
_space_group_table['162'] = sg
_space_group_table['-P 3 2'] = sg
_space_group_table['P-31m'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D3d^2', '163', '-P 3 2c', 'P-31c'], transformations)
_space_group_table['D3d^2'] = sg
_space_group_table['163'] = sg
_space_group_table['-P 3 2c'] = sg
_space_group_table['P-31c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D3d^3', '164', '-P 3 2"', 'P-3m1'], transformations)
_space_group_table['D3d^3'] = sg
_space_group_table['164'] = sg
_space_group_table['-P 3 2"'] = sg
_space_group_table['P-3m1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D3d^4', '165', '-P 3 2"c', 'P-3c1'], transformations)
_space_group_table['D3d^4'] = sg
_space_group_table['165'] = sg
_space_group_table['-P 3 2"c'] = sg
_space_group_table['P-3c1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D3d^5', '-R 3 2"', 'R-3m:H', '166:H'], transformations)
_space_group_table['D3d^5'] = sg
_space_group_table['-R 3 2"'] = sg
_space_group_table['R-3m:H'] = sg
_space_group_table['166:H'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D3d^5', '-P 3* 2', 'R-3m:R', '166:R'], transformations)
_space_group_table['D3d^5'] = sg
_space_group_table['-P 3* 2'] = sg
_space_group_table['R-3m:R'] = sg
_space_group_table['166:R'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,7./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,7./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,7./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,1./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,1./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,1./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,5./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,5./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,5./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,-1./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,-1./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,-1./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D3d^6', '-R 3 2"c', 'R-3c:H', '167:H'], transformations)
_space_group_table['D3d^6'] = sg
_space_group_table['-R 3 2"c'] = sg
_space_group_table['R-3c:H'] = sg
_space_group_table['167:H'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,7./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,7./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,7./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,1./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,1./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./3.,2./3.,1./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,5./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,5./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,5./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,-1./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,-1./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(2./3.,1./3.,-1./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D3d^6', '-P 3* 2n', 'R-3c:R', '167:R'], transformations)
_space_group_table['D3d^6'] = sg
_space_group_table['-P 3* 2n'] = sg
_space_group_table['R-3c:R'] = sg
_space_group_table['167:R'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C6^1', '168', 'P 6', 'P6'], transformations)
_space_group_table['C6^1'] = sg
_space_group_table['168'] = sg
_space_group_table['P 6'] = sg
_space_group_table['P6'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,5./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C6^2', '169', 'P 61', 'P61'], transformations)
_space_group_table['C6^2'] = sg
_space_group_table['169'] = sg
_space_group_table['P 61'] = sg
_space_group_table['P61'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,5./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C6^3', '170', 'P 65', 'P65'], transformations)
_space_group_table['C6^3'] = sg
_space_group_table['170'] = sg
_space_group_table['P 65'] = sg
_space_group_table['P65'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C6^4', '171', 'P 62', 'P62'], transformations)
_space_group_table['C6^4'] = sg
_space_group_table['171'] = sg
_space_group_table['P 62'] = sg
_space_group_table['P62'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C6^5', '172', 'P 64', 'P64'], transformations)
_space_group_table['C6^5'] = sg
_space_group_table['172'] = sg
_space_group_table['P 64'] = sg
_space_group_table['P64'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C6^6', '173', 'P 6c', 'P63'], transformations)
_space_group_table['C6^6'] = sg
_space_group_table['173'] = sg
_space_group_table['P 6c'] = sg
_space_group_table['P63'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C3h^1', '174', 'P -6', 'P-6'], transformations)
_space_group_table['C3h^1'] = sg
_space_group_table['174'] = sg
_space_group_table['P -6'] = sg
_space_group_table['P-6'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C6h^1', '175', '-P 6', 'P6/m'], transformations)
_space_group_table['C6h^1'] = sg
_space_group_table['175'] = sg
_space_group_table['-P 6'] = sg
_space_group_table['P6/m'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C6h^2', '176', '-P 6c', 'P63/m'], transformations)
_space_group_table['C6h^2'] = sg
_space_group_table['176'] = sg
_space_group_table['-P 6c'] = sg
_space_group_table['P63/m'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D6^1', '177', 'P 6 2', 'P622'], transformations)
_space_group_table['D6^1'] = sg
_space_group_table['177'] = sg
_space_group_table['P 6 2'] = sg
_space_group_table['P622'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,5./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,5./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D6^2', '178', 'P 61 2 (0 0 -1)', 'P6122'], transformations)
_space_group_table['D6^2'] = sg
_space_group_table['178'] = sg
_space_group_table['P 61 2 (0 0 -1)'] = sg
_space_group_table['P6122'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,5./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,5./6.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D6^3', '179', 'P 65 2 (0 0 1)', 'P6522'], transformations)
_space_group_table['D6^3'] = sg
_space_group_table['179'] = sg
_space_group_table['P 65 2 (0 0 1)'] = sg
_space_group_table['P6522'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D6^4', '180', 'P 62 2c (0 0 1)', 'P6222'], transformations)
_space_group_table['D6^4'] = sg
_space_group_table['180'] = sg
_space_group_table['P 62 2c (0 0 1)'] = sg
_space_group_table['P6222'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,2./3.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D6^5', '181', 'P 64 2c (0 0 01)', 'P6422'], transformations)
_space_group_table['D6^5'] = sg
_space_group_table['181'] = sg
_space_group_table['P 64 2c (0 0 01)'] = sg
_space_group_table['P6422'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D6^6', '182', 'P 6c 2c', 'P6322'], transformations)
_space_group_table['D6^6'] = sg
_space_group_table['182'] = sg
_space_group_table['P 6c 2c'] = sg
_space_group_table['P6322'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C6v^1', '183', 'P 6 -2', 'P6mm'], transformations)
_space_group_table['C6v^1'] = sg
_space_group_table['183'] = sg
_space_group_table['P 6 -2'] = sg
_space_group_table['P6mm'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C6v^2', '184', 'P 6 -2c', 'P6cc'], transformations)
_space_group_table['C6v^2'] = sg
_space_group_table['184'] = sg
_space_group_table['P 6 -2c'] = sg
_space_group_table['P6cc'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C6v^3', '185', 'P 6c -2', 'P63cm'], transformations)
_space_group_table['C6v^3'] = sg
_space_group_table['185'] = sg
_space_group_table['P 6c -2'] = sg
_space_group_table['P63cm'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['C6v^4', '186', 'P 6c -2c', 'P63mc'], transformations)
_space_group_table['C6v^4'] = sg
_space_group_table['186'] = sg
_space_group_table['P 6c -2c'] = sg
_space_group_table['P63mc'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D3h^1', '187', 'P -6 2', 'P-6m2'], transformations)
_space_group_table['D3h^1'] = sg
_space_group_table['187'] = sg
_space_group_table['P -6 2'] = sg
_space_group_table['P-6m2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D3h^2', '188', 'P -6c 2', 'P-6c2'], transformations)
_space_group_table['D3h^2'] = sg
_space_group_table['188'] = sg
_space_group_table['P -6c 2'] = sg
_space_group_table['P-6c2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D3h^3', '189', 'P -6 -2', 'P-62m'], transformations)
_space_group_table['D3h^3'] = sg
_space_group_table['189'] = sg
_space_group_table['P -6 -2'] = sg
_space_group_table['P-62m'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D3h^4', '190', 'P -6c -2c', 'P-62c'], transformations)
_space_group_table['D3h^4'] = sg
_space_group_table['190'] = sg
_space_group_table['P -6c -2c'] = sg
_space_group_table['P-62c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D6h^1', '191', '-P 6 2', 'P6/mmm'], transformations)
_space_group_table['D6h^1'] = sg
_space_group_table['191'] = sg
_space_group_table['-P 6 2'] = sg
_space_group_table['P6/mmm'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D6h^2', '192', '-P 6 2c', 'P6/mcc'], transformations)
_space_group_table['D6h^2'] = sg
_space_group_table['192'] = sg
_space_group_table['-P 6 2c'] = sg
_space_group_table['P6/mcc'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D6h^3', '193', '-P 6c 2', 'P63/mcm'], transformations)
_space_group_table['D6h^3'] = sg
_space_group_table['193'] = sg
_space_group_table['-P 6c 2'] = sg
_space_group_table['P63/mcm'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,1.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,1.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,-1.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,-1.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['D6h^4', '194', '-P 6c 2c', 'P63/mmc'], transformations)
_space_group_table['D6h^4'] = sg
_space_group_table['194'] = sg
_space_group_table['-P 6c 2c'] = sg
_space_group_table['P63/mmc'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['T^1', '195', 'P 2 2 3', 'P23'], transformations)
_space_group_table['T^1'] = sg
_space_group_table['195'] = sg
_space_group_table['P 2 2 3'] = sg
_space_group_table['P23'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['T^2', '196', 'F 2 2 3', 'F23'], transformations)
_space_group_table['T^2'] = sg
_space_group_table['196'] = sg
_space_group_table['F 2 2 3'] = sg
_space_group_table['F23'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['T^3', '197', 'I 2 2 3', 'I23'], transformations)
_space_group_table['T^3'] = sg
_space_group_table['197'] = sg
_space_group_table['I 2 2 3'] = sg
_space_group_table['I23'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['T^4', '198', 'P 2ac 2ab 3', 'P213'], transformations)
_space_group_table['T^4'] = sg
_space_group_table['198'] = sg
_space_group_table['P 2ac 2ab 3'] = sg
_space_group_table['P213'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['T^5', '199', 'I 2b 2c 3', 'I213'], transformations)
_space_group_table['T^5'] = sg
_space_group_table['199'] = sg
_space_group_table['I 2b 2c 3'] = sg
_space_group_table['I213'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Th^1', '200', '-P 2 2 3', 'Pm-3'], transformations)
_space_group_table['Th^1'] = sg
_space_group_table['200'] = sg
_space_group_table['-P 2 2 3'] = sg
_space_group_table['Pm-3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Th^2', 'P 2 2 3 -1n', 'Pn-3:1', '201:1'], transformations)
_space_group_table['Th^2'] = sg
_space_group_table['P 2 2 3 -1n'] = sg
_space_group_table['Pn-3:1'] = sg
_space_group_table['201:1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Th^2', '-P 2ab 2bc 3', 'Pn-3:2', '201:2'], transformations)
_space_group_table['Th^2'] = sg
_space_group_table['-P 2ab 2bc 3'] = sg
_space_group_table['Pn-3:2'] = sg
_space_group_table['201:2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Th^3', '202', '-F 2 2 3', 'Fm-3'], transformations)
_space_group_table['Th^3'] = sg
_space_group_table['202'] = sg
_space_group_table['-F 2 2 3'] = sg
_space_group_table['Fm-3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Th^4', 'F 2 2 3 -1d', 'Fd-3:1', '203:1'], transformations)
_space_group_table['Th^4'] = sg
_space_group_table['F 2 2 3 -1d'] = sg
_space_group_table['Fd-3:1'] = sg
_space_group_table['203:1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Th^4', '-F 2uv 2vw 3', 'Fd-3:2', '203:2'], transformations)
_space_group_table['Th^4'] = sg
_space_group_table['-F 2uv 2vw 3'] = sg
_space_group_table['Fd-3:2'] = sg
_space_group_table['203:2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Th^5', '204', '-I 2 2 3', 'Im-3'], transformations)
_space_group_table['Th^5'] = sg
_space_group_table['204'] = sg
_space_group_table['-I 2 2 3'] = sg
_space_group_table['Im-3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Th^6', '205', '-P 2ac 2ab 3', 'Pa-3'], transformations)
_space_group_table['Th^6'] = sg
_space_group_table['205'] = sg
_space_group_table['-P 2ac 2ab 3'] = sg
_space_group_table['Pa-3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Th^7', '206', '-I 2b 2c 3', 'Ia-3'], transformations)
_space_group_table['Th^7'] = sg
_space_group_table['206'] = sg
_space_group_table['-I 2b 2c 3'] = sg
_space_group_table['Ia-3'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['O^1', '207', 'P 4 2 3', 'P432'], transformations)
_space_group_table['O^1'] = sg
_space_group_table['207'] = sg
_space_group_table['P 4 2 3'] = sg
_space_group_table['P432'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['O^2', '208', 'P 4n 2 3', 'P4232'], transformations)
_space_group_table['O^2'] = sg
_space_group_table['208'] = sg
_space_group_table['P 4n 2 3'] = sg
_space_group_table['P4232'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['O^3', '209', 'F 4 2 3', 'F432'], transformations)
_space_group_table['O^3'] = sg
_space_group_table['209'] = sg
_space_group_table['F 4 2 3'] = sg
_space_group_table['F432'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['O^4', '210', 'F 4d 2 3', 'F4132'], transformations)
_space_group_table['O^4'] = sg
_space_group_table['210'] = sg
_space_group_table['F 4d 2 3'] = sg
_space_group_table['F4132'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['O^5', '211', 'I 4 2 3', 'I432'], transformations)
_space_group_table['O^5'] = sg
_space_group_table['211'] = sg
_space_group_table['I 4 2 3'] = sg
_space_group_table['I432'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['O^6', '212', 'P 4acd 2ab 3', 'P4332'], transformations)
_space_group_table['O^6'] = sg
_space_group_table['212'] = sg
_space_group_table['P 4acd 2ab 3'] = sg
_space_group_table['P4332'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['O^7', '213', 'P 4bd 2ab 3', 'P4132'], transformations)
_space_group_table['O^7'] = sg
_space_group_table['213'] = sg
_space_group_table['P 4bd 2ab 3'] = sg
_space_group_table['P4132'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['O^8', '214', 'I 4bd 2c 3', 'I4132'], transformations)
_space_group_table['O^8'] = sg
_space_group_table['214'] = sg
_space_group_table['I 4bd 2c 3'] = sg
_space_group_table['I4132'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Td^1', '215', 'P -4 2 3', 'P-43m'], transformations)
_space_group_table['Td^1'] = sg
_space_group_table['215'] = sg
_space_group_table['P -4 2 3'] = sg
_space_group_table['P-43m'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Td^2', '216', 'F -4 2 3', 'F-43m'], transformations)
_space_group_table['Td^2'] = sg
_space_group_table['216'] = sg
_space_group_table['F -4 2 3'] = sg
_space_group_table['F-43m'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Td^3', '217', 'I -4 2 3', 'I-43m'], transformations)
_space_group_table['Td^3'] = sg
_space_group_table['217'] = sg
_space_group_table['I -4 2 3'] = sg
_space_group_table['I-43m'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Td^4', '218', 'P -4n 2 3', 'P-43n'], transformations)
_space_group_table['Td^4'] = sg
_space_group_table['218'] = sg
_space_group_table['P -4n 2 3'] = sg
_space_group_table['P-43n'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Td^5', '219', 'F -4c 2 3', 'F-43c'], transformations)
_space_group_table['Td^5'] = sg
_space_group_table['219'] = sg
_space_group_table['F -4c 2 3'] = sg
_space_group_table['F-43c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Td^6', '220', 'I -4bd 2c 3', 'I-43d'], transformations)
_space_group_table['Td^6'] = sg
_space_group_table['220'] = sg
_space_group_table['I -4bd 2c 3'] = sg
_space_group_table['I-43d'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Oh^1', '221', '-P 4 2 3', 'Pm-3m'], transformations)
_space_group_table['Oh^1'] = sg
_space_group_table['221'] = sg
_space_group_table['-P 4 2 3'] = sg
_space_group_table['Pm-3m'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Oh^2', 'P 4 2 3 -1n', 'Pn-3n:1', '222:1'], transformations)
_space_group_table['Oh^2'] = sg
_space_group_table['P 4 2 3 -1n'] = sg
_space_group_table['Pn-3n:1'] = sg
_space_group_table['222:1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Oh^2', '-P 4a 2bc 3', 'Pn-3n:2', '222:2'], transformations)
_space_group_table['Oh^2'] = sg
_space_group_table['-P 4a 2bc 3'] = sg
_space_group_table['Pn-3n:2'] = sg
_space_group_table['222:2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Oh^3', '223', '-P 4n 2 3', 'Pm-3n'], transformations)
_space_group_table['Oh^3'] = sg
_space_group_table['223'] = sg
_space_group_table['-P 4n 2 3'] = sg
_space_group_table['Pm-3n'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Oh^4', 'P 4n 2 3 -1n', 'Pn-3m:1', '224:1'], transformations)
_space_group_table['Oh^4'] = sg
_space_group_table['P 4n 2 3 -1n'] = sg
_space_group_table['Pn-3m:1'] = sg
_space_group_table['224:1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Oh^4', '-P 4bc 2bc 3', 'Pn-3m:2', '224:2'], transformations)
_space_group_table['Oh^4'] = sg
_space_group_table['-P 4bc 2bc 3'] = sg
_space_group_table['Pn-3m:2'] = sg
_space_group_table['224:2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Oh^5', '225', '-F 4 2 3', 'Fm-3m'], transformations)
_space_group_table['Oh^5'] = sg
_space_group_table['225'] = sg
_space_group_table['-F 4 2 3'] = sg
_space_group_table['Fm-3m'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Oh^6', '226', '-F 4c 2 3', 'Fm-3c'], transformations)
_space_group_table['Oh^6'] = sg
_space_group_table['226'] = sg
_space_group_table['-F 4c 2 3'] = sg
_space_group_table['Fm-3c'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Oh^7', 'F 4d 2 3 -1d', 'Fd-3m:1', '227:1'], transformations)
_space_group_table['Oh^7'] = sg
_space_group_table['F 4d 2 3 -1d'] = sg
_space_group_table['Fd-3m:1'] = sg
_space_group_table['227:1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Oh^7', '-F 4vw 2vw 3', 'Fd-3m:2', '227:2'], transformations)
_space_group_table['Oh^7'] = sg
_space_group_table['-F 4vw 2vw 3'] = sg
_space_group_table['Fd-3m:2'] = sg
_space_group_table['227:2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,5./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,5./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,5./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,-3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,-3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,-3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Oh^8', 'F 4d 2 3 -1cd', 'Fd-3c:1', '228:1'], transformations)
_space_group_table['Oh^8'] = sg
_space_group_table['F 4d 2 3 -1cd'] = sg
_space_group_table['Fd-3c:1'] = sg
_space_group_table['228:1'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,0.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./4.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,5./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,5./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,5./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,3./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,0.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,-3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,-3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,-3./4.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,0.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,1./2.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./2.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./4.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Oh^8', '-F 4cvw 2vw 3', 'Fd-3c:2', '228:2'], transformations)
_space_group_table['Oh^8'] = sg
_space_group_table['-F 4cvw 2vw 3'] = sg
_space_group_table['Fd-3c:2'] = sg
_space_group_table['228:2'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Oh^9', '229', '-I 4 2 3', 'Im-3m'], transformations)
_space_group_table['Oh^9'] = sg
_space_group_table['229'] = sg
_space_group_table['-I 4 2 3'] = sg
_space_group_table['Im-3m'] = sg

transformations = []
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,3./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-3./4.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-3./4.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-3./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-3./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,0.,-1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./2.,0.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(0.,-1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-3./4.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,-3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-3./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(-1./4.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,5./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,5./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(3./4.,3./4.,3./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,-1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,0.,-1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,-1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,-1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,-1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,1.,0.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,-1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,-1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,1.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,0.,0.,-1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,1.,0.,0.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,-1.,0.,0.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,0.,0.,1.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([-1.,0.,0.,0.,1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./2.,1./2.,0.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,-1.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(0.,1./2.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,1.,0.,0.,0.,-1.])
rot.shape = (3, 3)
trans = Vector(1./2.,0.,1./2.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,-1.,0.,-1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,1.,0.,1.,0.,0.,0.,0.,1.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,-1.,0.,1.,0.,-1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,-1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([0.,0.,1.,0.,1.,0.,1.,0.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,-1.,0.,-1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,-1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
rot = N.array([1.,0.,0.,0.,0.,1.,0.,1.,0.])
rot.shape = (3, 3)
trans = Vector(1./4.,1./4.,1./4.)
transformations.append(Translation(trans)*Rotation(Tensor(rot)))
sg = SpaceGroup(['Oh^10', '230', '-I 4bd 2c 3', 'Ia-3d'], transformations)
_space_group_table['Oh^10'] = sg
_space_group_table['230'] = sg
_space_group_table['-I 4bd 2c 3'] = sg
_space_group_table['Ia-3d'] = sg


del transformations
del rot
del trans
